<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\output.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\output.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Mon Aug 19 08:53:46 2024
<BR><P>
<H3>Maximum Stack Usage =        844 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_nx_tcp_queue_process &rArr; _nx_tcp_packet_process &rArr; OUTLINED_FUNCTION_0 &rArr; _nx_tcp_no_connection_reset &rArr; _nx_tcp_packet_send_rst &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[268]">_tx_initialize_low_level</a>
 <LI><a href="#[d4]">__tx_BadHandler</a>
 <LI><a href="#[d5]">__tx_HardfaultHandler</a>
 <LI><a href="#[d6]">__tx_SVCallHandler</a>
 <LI><a href="#[2a0]">__tx_IntHandler</a>
 <LI><a href="#[9]">SysTick_Handler</a>
 <LI><a href="#[2a1]">__tx_SysTickHandler</a>
 <LI><a href="#[d8]">__tx_NMIHandler</a>
 <LI><a href="#[d9]">__tx_DBGHandler</a>
 <LI><a href="#[26a]">_tx_thread_schedule</a>
 <LI><a href="#[8]">PendSV_Handler</a>
 <LI><a href="#[2a2]">__tx_PendSVHandler</a>
 <LI><a href="#[2a3]">tx_thread_fpu_enable</a>
 <LI><a href="#[2a4]">tx_thread_fpu_disable</a>
 <LI><a href="#[270]">_tx_thread_stack_build</a>
 <LI><a href="#[d7]">_tx_timer_interrupt</a>
 <LI><a href="#[2]">HardFault_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[81]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[81]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[98]">AppTaskMsgPro</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[98]">AppTaskMsgPro</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[81]">ADC3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9b]">AppTaskGUI</a> from main.o(.text.AppTaskGUI) referenced from main.o(.text.AppTaskStart)
 <LI><a href="#[cf]">AppTaskIDLE</a> from main.o(.text.AppTaskIDLE) referenced from main.o(.text.tx_application_define)
 <LI><a href="#[98]">AppTaskMsgPro</a> from main.o(.text.AppTaskMsgPro) referenced from main.o(.text.AppTaskStart)
 <LI><a href="#[9c]">AppTaskNetXPro</a> from main.o(.text.AppTaskNetXPro) referenced from main.o(.text.AppTaskStart)
 <LI><a href="#[cd]">AppTaskStart</a> from main.o(.text.AppTaskStart) referenced from main.o(.text.tx_application_define)
 <LI><a href="#[ce]">AppTaskStat</a> from main.o(.text.AppTaskStat) referenced from main.o(.text.tx_application_define)
 <LI><a href="#[9a]">AppTaskUserIF</a> from main.o(.text.AppTaskUserIF) referenced from main.o(.text.AppTaskStart)
 <LI><a href="#[9d]">App_Printf</a> from main.o(.text.App_Printf) referenced from main.o(.text.AppTaskUserIF)
 <LI><a href="#[83]">BDMA_Channel0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[84]">BDMA_Channel1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[85]">BDMA_Channel2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[86]">BDMA_Channel3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[87]">BDMA_Channel4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[88]">BDMA_Channel5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[89]">BDMA_Channel6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8a]">BDMA_Channel7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32h7xx_it.o(.text.BusFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[62]">CEC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8b]">COMP1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[91]">CRS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[53]">DCMI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[72]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[73]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[74]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[75]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5e]">DMA2D_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[41]">DMA2_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6a]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[82]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32h7xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[92]">ECC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[46]">ETH_IRQHandler</a> from nx_stm32_eth_driver.o(.text.ETH_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[47]">ETH_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1d]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1f]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1e]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[20]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[48]">FDCAN_CAL_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[39]">FMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[55]">FPU_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9e]">HAL_GPIO_Init</a> from stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init) referenced from lan8720a.o(.text.ETH_GPIO_Config)
 <LI><a href="#[9e]">HAL_GPIO_Init</a> from stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init) referenced from bsp_led.o(.text.bsp_InitLed)
 <LI><a href="#[9e]">HAL_GPIO_Init</a> from stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init) referenced from bsp_uart_fifo.o(.text.bsp_InitUart)
 <LI><a href="#[a4]">HAL_MPU_ConfigRegion</a> from stm32h7xx_hal_cortex.o(.text.HAL_MPU_ConfigRegion) referenced from bsp.o(.text.System_init)
 <LI><a href="#[c7]">HAL_SDRAM_SendCommand</a> from stm32h7xx_hal_sdram.o(.text.HAL_SDRAM_SendCommand) referenced from bsp_fmc_sdram.o(.text.bsp_InitExtSDRAM)
 <LI><a href="#[71]">HRTIM1_FLT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6b]">HRTIM1_Master_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6c]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6d]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6e]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6f]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[70]">HRTIM1_TIME_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[80]">HSEM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from hardfaulthandler.o(OSKERNEL) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4e]">I2C3_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4d]">I2C3_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[64]">I2C4_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[63]">I2C4_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7d]">JPEG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[61]">LPTIM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8c]">LPTIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8d]">LPTIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8e]">LPTIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8f]">LPTIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[90]">LPUART1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5d]">LTDC_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5c]">LTDC_IRQHandler</a> from bsp_tft_h7.o(.text.LTDC_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7c]">MDIOS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7b]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7e]">MDMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32h7xx_it.o(.text.MemManage_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32h7xx_it.o(.text.NMI_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[67]">OTG_FS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[66]">OTG_FS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[69]">OTG_FS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[68]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[50]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4f]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[52]">OTG_HS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[51]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b]">PVD_AVD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from tx_thread_schedule.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[60]">QUADSPI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[54]">RNG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[c9]">RS485_ReciveNew</a> from bsp_uart_fifo.o(.text.RS485_ReciveNew) referenced from bsp_uart_fifo.o(.text.bsp_InitUart)
 <LI><a href="#[cb]">RS485_SendBefor</a> from bsp_uart_fifo.o(.text.RS485_SendBefor) referenced from bsp_uart_fifo.o(.text.bsp_InitUart)
 <LI><a href="#[ca]">RS485_SendOver</a> from bsp_uart_fifo.o(.text.RS485_SendOver) referenced from bsp_uart_fifo.o(.text.bsp_InitUart)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5b]">SAI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5f]">SAI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[76]">SAI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[93]">SAI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3a]">SDMMC1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7f]">SDMMC2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[65]">SPDIF_RX_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3c]">SPI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[58]">SPI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[59]">SPI5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5a]">SPI6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a3]">STMPE811_WriteReg1</a> from bsp_ts_stmpe811.o(.text.STMPE811_WriteReg1) referenced from bsp_ts_stmpe811.o(.text.STMPE811_InitHard)
 <LI><a href="#[6]">SVC_Handler</a> from stm32h7xx_it.o(.text.SVC_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[77]">SWPMI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from tx_initialize_low_level.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[96]">SystemInit</a> from system_stm32h7xx.o(.text.SystemInit) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[78]">TIM15_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[79]">TIM16_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7a]">TIM17_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3b]">TIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3f]">TIM6_DAC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[40]">TIM7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[34]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[37]">TIM8_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[36]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[35]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3d]">UART4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3e]">UART5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[56]">UART7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[57]">UART8_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from bsp_uart_fifo.o(.text.USART1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from bsp_uart_fifo.o(.text.USART3_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4c]">USART6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32h7xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[94]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[97]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[a9]">_nx_arp_entry_allocate</a> from nx_arp_entry_allocate.o(.text._nx_arp_entry_allocate) referenced from nx_arp_enable.o(.text._nx_arp_enable)
 <LI><a href="#[a6]">_nx_arp_packet_send</a> from nx_arp_packet_send.o(.text._nx_arp_packet_send) referenced from nx_arp_enable.o(.text._nx_arp_enable)
 <LI><a href="#[a8]">_nx_arp_periodic_update</a> from nx_arp_periodic_update.o(.text._nx_arp_periodic_update) referenced from nx_arp_enable.o(.text._nx_arp_enable)
 <LI><a href="#[a7]">_nx_arp_queue_process</a> from nx_arp_queue_process.o(.text._nx_arp_queue_process) referenced from nx_arp_enable.o(.text._nx_arp_enable)
 <LI><a href="#[ab]">_nx_icmp_packet_receive</a> from nx_icmp_packet_receive.o(.text._nx_icmp_packet_receive) referenced from nx_icmp_enable.o(.text._nx_icmp_enable)
 <LI><a href="#[ac]">_nx_icmp_queue_process</a> from nx_icmp_queue_process.o(.text._nx_icmp_queue_process) referenced from nx_icmp_enable.o(.text._nx_icmp_enable)
 <LI><a href="#[aa]">_nx_icmpv4_packet_process</a> from nx_icmpv4_packet_process.o(.text._nx_icmpv4_packet_process) referenced from nx_icmp_enable.o(.text._nx_icmp_enable)
 <LI><a href="#[b0]">_nx_ip_fast_periodic_timer_entry</a> from nx_ip_fast_periodic_timer_entry.o(.text._nx_ip_fast_periodic_timer_entry) referenced from nx_ip_fast_periodic_timer_entry.o(.text._nx_ip_fast_periodic_timer_create)
 <LI><a href="#[b2]">_nx_ip_fragment_assembly</a> from nx_ip_fragment_assembly.o(.text._nx_ip_fragment_assembly) referenced from nx_ip_fragment_enable.o(.text._nx_ip_fragment_enable)
 <LI><a href="#[b3]">_nx_ip_fragment_packet</a> from nx_ip_fragment_packet.o(.text._nx_ip_fragment_packet) referenced from nx_ip_fragment_enable.o(.text._nx_ip_fragment_enable)
 <LI><a href="#[b1]">_nx_ip_fragment_timeout_check</a> from nx_ip_fragment_timeout_check.o(.text._nx_ip_fragment_timeout_check) referenced from nx_ip_fragment_enable.o(.text._nx_ip_fragment_enable)
 <LI><a href="#[ae]">_nx_ip_periodic_timer_entry</a> from nx_ip_periodic_timer_entry.o(.text._nx_ip_periodic_timer_entry) referenced from nx_ip_create.o(.text._nx_ip_create)
 <LI><a href="#[ad]">_nx_ip_thread_entry</a> from nx_ip_thread_entry.o(.text._nx_ip_thread_entry) referenced from nx_ip_create.o(.text._nx_ip_create)
 <LI><a href="#[af]">_nx_ipv4_packet_receive</a> from nx_ipv4_packet_receive.o(.text._nx_ipv4_packet_receive) referenced from nx_ip_create.o(.text._nx_ip_create)
 <LI><a href="#[b4]">_nx_packet_pool_cleanup</a> from nx_packet_pool_cleanup.o(.text._nx_packet_pool_cleanup) referenced from nx_packet_allocate.o(.text._nx_packet_allocate)
 <LI><a href="#[b5]">_nx_tcp_cleanup_deferred</a> from nx_tcp_cleanup_deferred.o(.text._nx_tcp_cleanup_deferred) referenced from nx_tcp_disconnect_cleanup.o(.text._nx_tcp_disconnect_cleanup)
 <LI><a href="#[b5]">_nx_tcp_cleanup_deferred</a> from nx_tcp_cleanup_deferred.o(.text._nx_tcp_cleanup_deferred) referenced from nx_tcp_receive_cleanup.o(.text._nx_tcp_receive_cleanup)
 <LI><a href="#[b5]">_nx_tcp_cleanup_deferred</a> from nx_tcp_cleanup_deferred.o(.text._nx_tcp_cleanup_deferred) referenced from nx_tcp_transmit_cleanup.o(.text._nx_tcp_transmit_cleanup)
 <LI><a href="#[bb]">_nx_tcp_connect_cleanup</a> from nx_tcp_connect_cleanup.o(.text._nx_tcp_connect_cleanup) referenced from nx_tcp_server_socket_accept.o(.text._nx_tcp_server_socket_accept)
 <LI><a href="#[b7]">_nx_tcp_deferred_cleanup_check</a> from nx_tcp_deferred_cleanup_check.o(.text._nx_tcp_deferred_cleanup_check) referenced from nx_tcp_enable.o(.text._nx_tcp_enable)
 <LI><a href="#[bc]">_nx_tcp_disconnect_cleanup</a> from nx_tcp_disconnect_cleanup.o(.text._nx_tcp_disconnect_cleanup) referenced from nx_tcp_socket_disconnect.o(.text._nx_tcp_socket_disconnect)
 <LI><a href="#[b8]">_nx_tcp_fast_periodic_processing</a> from nx_tcp_fast_periodic_processing.o(.text._nx_tcp_fast_periodic_processing) referenced from nx_tcp_enable.o(.text._nx_tcp_enable)
 <LI><a href="#[ba]">_nx_tcp_packet_receive</a> from nx_tcp_packet_receive.o(.text._nx_tcp_packet_receive) referenced from nx_tcp_enable.o(.text._nx_tcp_enable)
 <LI><a href="#[b9]">_nx_tcp_periodic_processing</a> from nx_tcp_periodic_processing.o(.text._nx_tcp_periodic_processing) referenced from nx_tcp_enable.o(.text._nx_tcp_enable)
 <LI><a href="#[b6]">_nx_tcp_queue_process</a> from nx_tcp_queue_process.o(.text._nx_tcp_queue_process) referenced from nx_tcp_enable.o(.text._nx_tcp_enable)
 <LI><a href="#[bd]">_nx_tcp_receive_cleanup</a> from nx_tcp_receive_cleanup.o(.text._nx_tcp_receive_cleanup) referenced from nx_tcp_socket_receive.o(.text._nx_tcp_socket_receive)
 <LI><a href="#[be]">_nx_tcp_transmit_cleanup</a> from nx_tcp_transmit_cleanup.o(.text._nx_tcp_transmit_cleanup) referenced from nx_tcp_socket_send_internal.o(.text._nx_tcp_socket_send_internal)
 <LI><a href="#[bf]">_nx_udp_packet_receive</a> from nx_udp_packet_receive.o(.text._nx_udp_packet_receive) referenced from nx_udp_enable.o(.text._nx_udp_enable)
 <LI><a href="#[d1]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[c0]">_tx_event_flags_cleanup</a> from tx_event_flags_cleanup.o(.text._tx_event_flags_cleanup) referenced from tx_event_flags_get.o(.text._tx_event_flags_get)
 <LI><a href="#[c2]">_tx_mutex_cleanup</a> from tx_mutex_cleanup.o(.text._tx_mutex_cleanup) referenced from tx_mutex_get.o(.text._tx_mutex_get)
 <LI><a href="#[c1]">_tx_mutex_thread_release</a> from tx_mutex_cleanup.o(.text._tx_mutex_thread_release) referenced from tx_mutex_create.o(.text._tx_mutex_create)
 <LI><a href="#[c3]">_tx_semaphore_cleanup</a> from tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup) referenced from tx_semaphore_get.o(.text._tx_semaphore_get)
 <LI><a href="#[c5]">_tx_thread_shell_entry</a> from tx_thread_shell_entry.o(.text._tx_thread_shell_entry) referenced from tx_thread_create.o(.text._tx_thread_create)
 <LI><a href="#[c4]">_tx_thread_timeout</a> from tx_thread_timeout.o(.text._tx_thread_timeout) referenced from tx_thread_create.o(.text._tx_thread_create)
 <LI><a href="#[c6]">_tx_timer_thread_entry</a> from tx_timer_thread_entry.o(.text._tx_timer_thread_entry) referenced from tx_timer_initialize.o(.text._tx_timer_initialize)
 <LI><a href="#[99]">_txe_thread_create</a> from txe_thread_create.o(.text._txe_thread_create) referenced from main.o(.text.AppTaskStart)
 <LI><a href="#[99]">_txe_thread_create</a> from txe_thread_create.o(.text._txe_thread_create) referenced from main.o(.text.tx_application_define)
 <LI><a href="#[a5]">bsp_DelayUS</a> from bsp_dwt.o(.text.bsp_DelayUS) referenced from bsp_ts_touch.o(.text.TOUCH_IntWakeUpForGT)
 <LI><a href="#[c8]">bsp_LedOff</a> from bsp_led.o(.text.bsp_LedOff) referenced from bsp_led.o(.text.bsp_InitLed)
 <LI><a href="#[d0]">fputc</a> from bsp_uart_fifo.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[cc]">i2c_Delay</a> from bsp_i2c_gpio.o(.text.i2c_Delay) referenced from bsp_i2c_gpio.o(.text.i2c_WaitAck)
 <LI><a href="#[9f]">i2c_SendByte</a> from bsp_i2c_gpio.o(.text.i2c_SendByte) referenced from bsp_ts_gt811.o(.text.GT811_WriteReg)
 <LI><a href="#[9f]">i2c_SendByte</a> from bsp_i2c_gpio.o(.text.i2c_SendByte) referenced from bsp_ts_gt911.o(.text.GT911_Scan)
 <LI><a href="#[a0]">i2c_WaitAck</a> from bsp_i2c_gpio.o(.text.i2c_WaitAck) referenced from bsp_ts_gt811.o(.text.GT811_WriteReg)
 <LI><a href="#[a0]">i2c_WaitAck</a> from bsp_i2c_gpio.o(.text.i2c_WaitAck) referenced from bsp_ts_gt911.o(.text.GT911_Scan)
 <LI><a href="#[95]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[a1]">nx_driver_stm32h7xx</a> from nx_stm32_eth_driver.o(.text.nx_driver_stm32h7xx) referenced from demo_lan8720a_netx.o(.text.NetXTest)
 <LI><a href="#[a2]">tcp_listen_callback</a> from demo_lan8720a_netx.o(.text.tcp_listen_callback) referenced from demo_lan8720a_netx.o(.text.NetXTest)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[97]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[29a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[d2]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[eb]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[29b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[29c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[29d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[29e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[29f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_FS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_FS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[268]"></a>_tx_initialize_low_level</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[d4]"></a>__tx_BadHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_BadHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_BadHandler
</UL>

<P><STRONG><a name="[d5]"></a>__tx_HardfaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_HardfaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_HardfaultHandler
</UL>

<P><STRONG><a name="[d6]"></a>__tx_SVCallHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_SVCallHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_SVCallHandler
</UL>

<P><STRONG><a name="[2a0]"></a>__tx_IntHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; _tx_timer_interrupt &rArr; _tx_timer_expiration_process &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2a1]"></a>__tx_SysTickHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>__tx_NMIHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_NMIHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_NMIHandler
</UL>

<P><STRONG><a name="[d9]"></a>__tx_DBGHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_DBGHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_DBGHandler
</UL>

<P><STRONG><a name="[26a]"></a>_tx_thread_schedule</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2a2]"></a>__tx_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text), UNUSED)

<P><STRONG><a name="[2a3]"></a>tx_thread_fpu_enable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>tx_thread_fpu_disable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>_tx_thread_stack_build</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_stack_build.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
</UL>

<P><STRONG><a name="[d7]"></a>_tx_timer_interrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_timer_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = _tx_timer_interrupt &rArr; _tx_timer_expiration_process &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_expiration_process
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_time_slice
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[23f]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_accept
</UL>

<P><STRONG><a name="[2a5]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>___aeabi_memmove4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_packet
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_fragment_process
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_data_append
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_data_retrieve
</UL>

<P><STRONG><a name="[2a9]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_trim_front
</UL>

<P><STRONG><a name="[2aa]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2ac]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2ad]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_create
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_create
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetUartParam
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSDRAM
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_create
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_create
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_initialize
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_initialize
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_create
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_create
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_add
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_pool_create
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_accept
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_no_connection_reset
</UL>

<P><STRONG><a name="[2ae]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[fc]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IP_ADDRESSES_BY_PREFIX
</UL>

<P><STRONG><a name="[2af]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[299]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[2b0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[2b1]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2b2]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[296]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d3]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2b3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2b4]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e4]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>CHECK_IPV6_ADDRESSES_SAME</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nx_ipv6_util.o(.text.CHECK_IPV6_ADDRESSES_SAME))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_assembly
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_invalidate_destination_entry
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_find
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_add
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_nd_cache_find_entry
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_interface_find
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_prefix_list_delete_entry
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
</UL>

<P><STRONG><a name="[fb]"></a>CHECK_IP_ADDRESSES_BY_PREFIX</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nx_ipv6_util.o(.text.CHECK_IP_ADDRESSES_BY_PREFIX))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CHECK_IP_ADDRESSES_BY_PREFIX &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_search_onlink
</UL>

<P><STRONG><a name="[fd]"></a>CHECK_UNSPECIFIED_ADDRESS</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nx_ipv6_util.o(.text.CHECK_UNSPECIFIED_ADDRESS))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
</UL>

<P><STRONG><a name="[1f8]"></a>COPY_IPV6_ADDRESS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nx_ipv6_util.o(.text.COPY_IPV6_ADDRESS))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_header_add
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_router_lookup
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_nd_cache_add_entry
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_add
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_relisten
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_no_connection_reset
</UL>

<P><STRONG><a name="[fe]"></a>ComToUart</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_uart_fifo.o(.text.ComToUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ComToUart
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comSendBuf
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>ETH_GPIO_Config</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, lan8720a.o(.text.ETH_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ETH_GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
</UL>

<P><STRONG><a name="[46]"></a>ETH_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nx_stm32_eth_driver.o(.text.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ETH_IRQHandler &rArr; HAL_ETH_IRQHandler &rArr; HAL_ETH_TxCpltCallback &rArr; _nx_ip_driver_deferred_processing &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[ff]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComToUart
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetUartParam
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSDRAM
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[171]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, stm32h7xx_ll_fmc.o(.text.FMC_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[174]"></a>FMC_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_ll_fmc.o(.text.FMC_SDRAM_ProgramRefreshRate))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[175]"></a>FMC_SDRAM_SendCommand</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32h7xx_ll_fmc.o(.text.FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[106]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, stm32h7xx_ll_fmc.o(.text.FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FMC_SDRAM_Timing_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[1cc]"></a>FT5X06_InitHard</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_ts_ft5x06.o(.text.FT5X06_InitHard))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
</UL>

<P><STRONG><a name="[108]"></a>FT5X06_ReadID</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bsp_ts_ft5x06.o(.text.FT5X06_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FT5X06_ReadID &rArr; FT5X06_ReadReg &rArr; i2c_ReadByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectLcdType
</UL>

<P><STRONG><a name="[10f]"></a>FT5X06_Scan</STRONG> (Thumb, 308 bytes, Stack size 64 bytes, bsp_ts_ft5x06.o(.text.FT5X06_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FT5X06_Scan &rArr; TOUCH_PutKey &rArr; TOUCH_TransY &rArr; OUTLINED_FUNCTION_1 &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PenInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_CapScan
</UL>

<P><STRONG><a name="[1d6]"></a>FT5X06_Timer1ms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_ts_ft5x06.o(.text.FT5X06_Timer1ms))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[112]"></a>GT811_InitHard</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bsp_ts_gt811.o(.text.GT811_InitHard))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GT811_InitHard &rArr; GT811_WriteReg &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
</UL>

<P><STRONG><a name="[115]"></a>GT811_Scan</STRONG> (Thumb, 328 bytes, Stack size 64 bytes, bsp_ts_gt811.o(.text.GT811_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GT811_Scan &rArr; TOUCH_PutKey &rArr; TOUCH_TransY &rArr; OUTLINED_FUNCTION_1 &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_CapScan
</UL>

<P><STRONG><a name="[1d4]"></a>GT811_Timer1ms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_ts_gt811.o(.text.GT811_Timer1ms))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[116]"></a>GT911_InitHard</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_ts_gt911.o(.text.GT911_InitHard))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GT911_InitHard &rArr; bsp_DelayMS &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
</UL>

<P><STRONG><a name="[118]"></a>GT911_ReadID</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bsp_ts_gt911.o(.text.GT911_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GT911_ReadID &rArr; GT911_ReadReg &rArr; i2c_ReadByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectLcdType
</UL>

<P><STRONG><a name="[11a]"></a>GT911_ReadMaxXY</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, bsp_ts_gt911.o(.text.GT911_ReadMaxXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GT911_ReadMaxXY &rArr; GT911_ReadReg &rArr; i2c_ReadByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectLcdType
</UL>

<P><STRONG><a name="[11b]"></a>GT911_Scan</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, bsp_ts_gt911.o(.text.GT911_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GT911_Scan &rArr; TOUCH_PutKey &rArr; TOUCH_TransY &rArr; OUTLINED_FUNCTION_1 &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadReg
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_CapScan
</UL>

<P><STRONG><a name="[1d5]"></a>GT911_Timer1ms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_ts_gt911.o(.text.GT911_Timer1ms))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[11c]"></a>HAL_Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_timebase_tim.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Delay &rArr; bsp_DelayMS &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSDRAM
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
</UL>

<P><STRONG><a name="[28e]"></a>HAL_ETH_BuildRxDescriptors</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_BuildRxDescriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_ETH_BuildRxDescriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[122]"></a>HAL_ETH_DMAErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_DMAErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[28f]"></a>HAL_ETH_DescAssignMemory</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_DescAssignMemory))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[125]"></a>HAL_ETH_EEECallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_EEECallback))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[290]"></a>HAL_ETH_GetMACConfig</STRONG> (Thumb, 394 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_GetMACConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[11d]"></a>HAL_ETH_GetRxDataBuffer</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_GetRxDataBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_ETH_GetRxDataBuffer &rArr; HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[11f]"></a>HAL_ETH_GetRxDataLength</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_GetRxDataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_ETH_GetRxDataLength &rArr; HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[105]"></a>HAL_ETH_IRQHandler</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_ETH_IRQHandler &rArr; HAL_ETH_TxCpltCallback &rArr; _nx_ip_driver_deferred_processing &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WakeUpCallback
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_EEECallback
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_PMTCallback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MACErrorCallback
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_DMAErrorCallback
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TxCpltCallback
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>HAL_ETH_Init</STRONG> (Thumb, 568 bytes, Stack size 160 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HAL_ETH_Init &rArr; HAL_ETH_MspInit &rArr; ETH_GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCFG_ETHInterfaceSelect
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetDMAConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetMACConfig
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[11e]"></a>HAL_ETH_IsRxDataAvailable</STRONG> (Thumb, 242 bytes, Stack size 20 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_IsRxDataAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetRxDataLength
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetRxDataBuffer
</UL>

<P><STRONG><a name="[123]"></a>HAL_ETH_MACErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_MACErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[128]"></a>HAL_ETH_MspInit</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, nx_stm32_eth_driver.o(.text.HAL_ETH_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ETH_MspInit &rArr; ETH_GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[124]"></a>HAL_ETH_PMTCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_PMTCallback))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>HAL_ETH_ReadPHYRegister</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_ReadPHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_GetLinkState
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
</UL>

<P><STRONG><a name="[120]"></a>HAL_ETH_RxCpltCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nx_stm32_eth_driver.o(.text.HAL_ETH_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_ETH_RxCpltCallback &rArr; _nx_ip_driver_deferred_processing &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_deferred_processing
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[133]"></a>HAL_ETH_SetDMAConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_SetDMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ETH_SetDMAConfig &rArr; ETH_SetDMAConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[134]"></a>HAL_ETH_SetMACConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_SetMACConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ETH_SetMACConfig &rArr; ETH_SetMACConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetMACConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[28d]"></a>HAL_ETH_SetMACFilterConfig</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_SetMACFilterConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ETH_SetMACFilterConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[135]"></a>HAL_ETH_Start_IT</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ETH_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[137]"></a>HAL_ETH_Stop</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_Stop))
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[139]"></a>HAL_ETH_Transmit</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[121]"></a>HAL_ETH_TxCpltCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nx_stm32_eth_driver.o(.text.HAL_ETH_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_ETH_TxCpltCallback &rArr; _nx_ip_driver_deferred_processing &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_deferred_processing
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[126]"></a>HAL_ETH_WakeUpCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_WakeUpCallback))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>HAL_ETH_WritePHYRegister</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_WritePHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
</UL>

<P><STRONG><a name="[13c]"></a>HAL_EnableCompensationCell</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_EnableCompensationCell))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[9e]"></a>HAL_GPIO_Init</STRONG> (Thumb, 388 bytes, Stack size 44 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_InitTXE
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitI2C
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_IntWakeUpForGT
</UL>
<BR>[Address Reference Count : 3]<UL><LI> bsp_led.o(.text.bsp_InitLed)
<LI> bsp_uart_fifo.o(.text.bsp_InitUart)
<LI> lan8720a.o(.text.ETH_GPIO_Config)
</UL>
<P><STRONG><a name="[288]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedToggle
</UL>

<P><STRONG><a name="[287]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOff
</UL>

<P><STRONG><a name="[16b]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[12a]"></a>HAL_GetTick</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32h7xx_hal_timebase_tim.o(.text.HAL_GetTick))
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Transmit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[13f]"></a>HAL_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32h7xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Init &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[142]"></a>HAL_InitTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_timebase_tim.o(.text.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[146]"></a>HAL_LTDC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[144]"></a>HAL_LTDC_IRQHandler</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_LTDC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ReloadEventCallback
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ErrorCallback
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>HAL_LTDC_LineEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_LineEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>HAL_LTDC_ReloadEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_ReloadEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_ConfigRegion))
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.text.System_init)
</UL>
<P><STRONG><a name="[1c2]"></a>HAL_MPU_Disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[1c4]"></a>HAL_MPU_Enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[143]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[130]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
</UL>

<P><STRONG><a name="[12f]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
</UL>

<P><STRONG><a name="[140]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[149]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32h7xx_hal_pwr_ex.o(.text.HAL_PWREx_ConfigSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_ConfigSupply
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[14c]"></a>HAL_RCCEx_GetD3PCLK1Freq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetD3PCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[14e]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[154]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[155]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1876 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; OUTLINED_FUNCTION_8 &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_20
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSDRAM
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[164]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 516 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[12b]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[166]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[168]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[141]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[169]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1144 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[ef]"></a>HAL_ResumeTick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_ResumeTick))
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[16f]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7xx_hal_sdram.o(.text.HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SDRAM_Init &rArr; FMC_SDRAM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSDRAM
</UL>

<P><STRONG><a name="[170]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sdram.o(.text.HAL_SDRAM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[172]"></a>HAL_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32h7xx_hal_sdram.o(.text.HAL_SDRAM_ProgramRefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_ProgramRefreshRate
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSDRAM
</UL>

<P><STRONG><a name="[c7]"></a>HAL_SDRAM_SendCommand</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32h7xx_hal_sdram.o(.text.HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_fmc_sdram.o(.text.bsp_InitExtSDRAM)
</UL>
<P><STRONG><a name="[129]"></a>HAL_SYSCFG_ETHInterfaceSelect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_SYSCFG_ETHInterfaceSelect))
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[177]"></a>HAL_SuspendTick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_SuspendTick))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[179]"></a>HAL_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_Init &rArr; OUTLINED_FUNCTION_0 &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_27
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_28
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetUartParam
</UL>

<P><STRONG><a name="[1b3]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[291]"></a>HardFaultHandler</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, segger_hardfaulthandler.o(.text.HardFaultHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardFaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[1fc]"></a>IPv6_Address_Type</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, nx_ipv6_util.o(.text.IPv6_Address_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IPv6_Address_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_timeout_check
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_interface_find
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_search_onlink
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
</UL>

<P><STRONG><a name="[180]"></a>LAN8720_GetLinkState</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lan8720a.o(.text.LAN8720_GetLinkState))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LAN8720_GetLinkState &rArr; HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[181]"></a>LAN8720_Init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lan8720a.o(.text.LAN8720_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LAN8720_Init &rArr; HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[5c]"></a>LTDC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_tft_h7.o(.text.LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LTDC_IRQHandler &rArr; HAL_LTDC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>NetXTest</STRONG> (Thumb, 516 bytes, Stack size 56 bytes, demo_lan8720a_netx.o(.text.NetXTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = NetXTest &rArr; _nxe_tcp_socket_disconnect &rArr; _nx_tcp_socket_disconnect &rArr; OUTLINED_FUNCTION_0 &rArr; _nx_tcp_packet_send_fin &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_release
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_send
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_data_retrieve
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_udp_source_extract
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_server_socket_relisten
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_server_socket_unaccept
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_disconnect
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_receive
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_info_get
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_server_socket_accept
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_get
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_server_socket_listen
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_create
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_priority_change
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_icmp_enable
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_udp_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_enable
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_ip_fragment_enable
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_arp_enable
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_ip_create
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_pool_create
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_system_initialize
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_create
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNetXPro
</UL>

<P><STRONG><a name="[1b6]"></a>RS485_InitTXE</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, bsp_uart_fifo.o(.text.RS485_InitTXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RS485_InitTXE &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[c9]"></a>RS485_ReciveNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_uart_fifo.o(.text.RS485_ReciveNew))
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart_fifo.o(.text.bsp_InitUart)
</UL>
<P><STRONG><a name="[cb]"></a>RS485_SendBefor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_uart_fifo.o(.text.RS485_SendBefor))
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart_fifo.o(.text.bsp_InitUart)
</UL>
<P><STRONG><a name="[ca]"></a>RS485_SendOver</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_uart_fifo.o(.text.RS485_SendOver))
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart_fifo.o(.text.bsp_InitUart)
</UL>
<P><STRONG><a name="[200]"></a>SET_SOLICITED_NODE_MULTICAST_ADDRESS</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nx_ipv6_util.o(.text.SET_SOLICITED_NODE_MULTICAST_ADDRESS))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_prefix_list_delete_entry
</UL>

<P><STRONG><a name="[225]"></a>SET_UNSPECIFIED_ADDRESS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nx_ipv6_util.o(.text.SET_UNSPECIFIED_ADDRESS))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_block_cleanup
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_prefix_list_delete_entry
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_unaccept
</UL>

<P><STRONG><a name="[1b7]"></a>STMPE811_ClearInt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_ts_stmpe811.o(.text.STMPE811_ClearInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STMPE811_ClearInt &rArr; STMPE811_WriteReg1 &rArr; STMPE811_WriteBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_WriteReg1
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[1b8]"></a>STMPE811_InitHard</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, bsp_ts_stmpe811.o(.text.STMPE811_InitHard))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STMPE811_InitHard &rArr; bsp_DelayMS &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectLcdType
</UL>

<P><STRONG><a name="[1b9]"></a>STMPE811_ReadBytes</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bsp_ts_stmpe811.o(.text.STMPE811_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = STMPE811_ReadBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadReg1
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadX
</UL>

<P><STRONG><a name="[1ba]"></a>STMPE811_ReadGPIO</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_ts_stmpe811.o(.text.STMPE811_ReadGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = STMPE811_ReadGPIO &rArr; STMPE811_ReadReg1 &rArr; STMPE811_ReadBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadReg1
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_WriteReg1
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadIO
</UL>

<P><STRONG><a name="[1bc]"></a>STMPE811_ReadIO</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_ts_stmpe811.o(.text.STMPE811_ReadIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = STMPE811_ReadIO &rArr; STMPE811_ReadGPIO &rArr; STMPE811_ReadReg1 &rArr; STMPE811_ReadBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectLcdType
</UL>

<P><STRONG><a name="[1bb]"></a>STMPE811_ReadReg1</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bsp_ts_stmpe811.o(.text.STMPE811_ReadReg1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STMPE811_ReadReg1 &rArr; STMPE811_ReadBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadGPIO
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadX
</UL>

<P><STRONG><a name="[1bd]"></a>STMPE811_ReadX</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bsp_ts_stmpe811.o(.text.STMPE811_ReadX))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = STMPE811_ReadX &rArr; STMPE811_ReadReg1 &rArr; STMPE811_ReadBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadReg1
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[1d7]"></a>STMPE811_ReadY</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_ts_stmpe811.o(.text.STMPE811_ReadY))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[1be]"></a>STMPE811_WriteBytes</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bsp_ts_stmpe811.o(.text.STMPE811_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = STMPE811_WriteBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_WriteReg1
</UL>

<P><STRONG><a name="[a3]"></a>STMPE811_WriteReg1</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bsp_ts_stmpe811.o(.text.STMPE811_WriteReg1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STMPE811_WriteReg1 &rArr; STMPE811_WriteBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadGPIO
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ClearInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_ts_stmpe811.o(.text.STMPE811_InitHard)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[f3]"></a>SysTick_ISR</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, bsp_timer.o(.text.SysTick_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SysTick_ISR &rArr; bsp_RunPer1ms &rArr; TOUCH_CapScan &rArr; GT911_Scan &rArr; TOUCH_PutKey &rArr; TOUCH_TransY &rArr; OUTLINED_FUNCTION_1 &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer1ms
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer10ms
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[96]"></a>SystemInit</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, system_stm32h7xx.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[1c1]"></a>System_init</STRONG> (Thumb, 580 bytes, Stack size 136 bytes, bsp.o(.text.System_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = System_init &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnableCompensationCell
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c8]"></a>TOUCH_CapScan</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bsp_ts_touch.o(.text.TOUCH_CapScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TOUCH_CapScan &rArr; GT911_Scan &rArr; TOUCH_PutKey &rArr; TOUCH_TransY &rArr; OUTLINED_FUNCTION_1 &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_Scan
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer1ms
</UL>

<P><STRONG><a name="[1c9]"></a>TOUCH_InitHard</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, bsp_ts_touch.o(.text.TOUCH_InitHard))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TOUCH_InitHard &rArr; bsp_DetectLcdType &rArr; STMPE811_ReadIO &rArr; STMPE811_ReadGPIO &rArr; STMPE811_ReadReg1 &rArr; STMPE811_ReadBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_SaveParam
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_InitHard
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_InitHard
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_InitHard
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_IntWakeUpForGT
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectLcdType
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[1ca]"></a>TOUCH_IntWakeUpForGT</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, bsp_ts_touch.o(.text.TOUCH_IntWakeUpForGT))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = TOUCH_IntWakeUpForGT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
</UL>

<P><STRONG><a name="[1da]"></a>TOUCH_MoveValid</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, bsp_ts_touch.o(.text.TOUCH_MoveValid))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[110]"></a>TOUCH_PenInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_ts_touch.o(.text.TOUCH_PenInt))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_Scan
</UL>

<P><STRONG><a name="[111]"></a>TOUCH_PutKey</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, bsp_ts_touch.o(.text.TOUCH_PutKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TOUCH_PutKey &rArr; TOUCH_TransY &rArr; OUTLINED_FUNCTION_1 &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_TransY
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_TransX
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_Scan
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_Scan
</UL>

<P><STRONG><a name="[1d3]"></a>TOUCH_Scan</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, bsp_ts_touch.o(.text.TOUCH_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TOUCH_Scan &rArr; STMPE811_ReadX &rArr; STMPE811_ReadReg1 &rArr; STMPE811_ReadBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ClearInt
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadY
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadX
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_Timer1ms
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Timer1ms
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_Timer1ms
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_MoveValid
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_DataFilter
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PressValid
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer1ms
</UL>

<P><STRONG><a name="[1b2]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_28
</UL>

<P><STRONG><a name="[17f]"></a>UART_CheckIdleState</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; OUTLINED_FUNCTION_22 &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[19a]"></a>UART_SetConfig</STRONG> (Thumb, 584 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[1b1]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_20
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_uart_fifo.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_IRQHandler &rArr; UartIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_uart_fifo.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_IRQHandler &rArr; UartIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1df]"></a>_nx_arp_dynamic_entry_delete</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, nx_arp_dynamic_entry_delete.o(.text._nx_arp_dynamic_entry_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _nx_arp_dynamic_entry_delete &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_entry_allocate
</UL>

<P><STRONG><a name="[1e1]"></a>_nx_arp_enable</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, nx_arp_enable.o(.text._nx_arp_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _nx_arp_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_arp_enable
</UL>

<P><STRONG><a name="[a9]"></a>_nx_arp_entry_allocate</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, nx_arp_entry_allocate.o(.text._nx_arp_entry_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _nx_arp_entry_allocate &rArr; _nx_arp_dynamic_entry_delete &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_dynamic_entry_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_arp_enable.o(.text._nx_arp_enable)
</UL>
<P><STRONG><a name="[1e2]"></a>_nx_arp_packet_deferred_receive</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, nx_arp_packet_deferred_receive.o(.text._nx_arp_packet_deferred_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _nx_arp_packet_deferred_receive &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[1e5]"></a>_nx_arp_packet_receive</STRONG> (Thumb, 700 bytes, Stack size 80 bytes, nx_arp_packet_receive.o(.text._nx_arp_packet_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _nx_arp_packet_receive &rArr; _nx_arp_queue_send &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_send
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_queue_process
</UL>

<P><STRONG><a name="[a6]"></a>_nx_arp_packet_send</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, nx_arp_packet_send.o(.text._nx_arp_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _nx_arp_packet_send &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_receive
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_periodic_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_arp_enable.o(.text._nx_arp_enable)
</UL>
<P><STRONG><a name="[a8]"></a>_nx_arp_periodic_update</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, nx_arp_periodic_update.o(.text._nx_arp_periodic_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _nx_arp_periodic_update &rArr; _nx_arp_packet_send &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_send
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_arp_enable.o(.text._nx_arp_enable)
</UL>
<P><STRONG><a name="[a7]"></a>_nx_arp_queue_process</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nx_arp_queue_process.o(.text._nx_arp_queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _nx_arp_queue_process &rArr; _nx_arp_packet_receive &rArr; _nx_arp_queue_send &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_arp_enable.o(.text._nx_arp_enable)
</UL>
<P><STRONG><a name="[1e8]"></a>_nx_arp_queue_send</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, nx_arp_queue_send.o(.text._nx_arp_queue_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _nx_arp_queue_send &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_receive
</UL>

<P><STRONG><a name="[25d]"></a>_nx_icmp_enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nx_icmp_enable.o(.text._nx_icmp_enable))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_icmp_enable
</UL>

<P><STRONG><a name="[1ea]"></a>_nx_icmp_packet_process</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nx_icmp_packet_process.o(.text._nx_icmp_packet_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _nx_icmp_packet_process &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmp_queue_process
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmp_packet_receive
</UL>

<P><STRONG><a name="[ab]"></a>_nx_icmp_packet_receive</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, nx_icmp_packet_receive.o(.text._nx_icmp_packet_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _nx_icmp_packet_receive &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmp_packet_process
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_icmp_enable.o(.text._nx_icmp_enable)
</UL>
<P><STRONG><a name="[ac]"></a>_nx_icmp_queue_process</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nx_icmp_queue_process.o(.text._nx_icmp_queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _nx_icmp_queue_process &rArr; _nx_icmp_packet_process &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmp_packet_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_icmp_enable.o(.text._nx_icmp_enable)
</UL>
<P><STRONG><a name="[aa]"></a>_nx_icmpv4_packet_process</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, nx_icmpv4_packet_process.o(.text._nx_icmpv4_packet_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = _nx_icmpv4_packet_process &rArr; _nx_icmpv4_process_echo_request &rArr; _nx_ip_packet_send &rArr; _nx_ip_driver_packet_send &rArr; _nx_packet_copy &rArr; _nx_packet_data_append &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_process_echo_request
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_process_echo_reply
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_icmp_enable.o(.text._nx_icmp_enable)
</UL>
<P><STRONG><a name="[1ec]"></a>_nx_icmpv4_process_echo_reply</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, nx_icmpv4_process_echo_reply.o(.text._nx_icmpv4_process_echo_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _nx_icmpv4_process_echo_reply &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_packet_process
</UL>

<P><STRONG><a name="[1ed]"></a>_nx_icmpv4_process_echo_request</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, nx_icmpv4_process_echo_request.o(.text._nx_icmpv4_process_echo_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = _nx_icmpv4_process_echo_request &rArr; _nx_ip_packet_send &rArr; _nx_ip_driver_packet_send &rArr; _nx_packet_copy &rArr; _nx_packet_data_append &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_route_find
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_packet_process
</UL>

<P><STRONG><a name="[1f2]"></a>_nx_icmpv4_send_error_message</STRONG> (Thumb, 332 bytes, Stack size 64 bytes, nx_icmpv4_send_error_message.o(.text._nx_icmpv4_send_error_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = _nx_icmpv4_send_error_message &rArr; _nx_ip_packet_send &rArr; _nx_ip_driver_packet_send &rArr; _nx_packet_copy &rArr; _nx_packet_data_append &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_route_find
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_timeout_check
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_dispatch_process
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv4_option_process
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_packet_receive
</UL>

<P><STRONG><a name="[1f4]"></a>_nx_icmpv6_DAD_clear_NDCache_entry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nx_icmpv6_dad_clear_ndcache_entry.o(.text._nx_icmpv6_DAD_clear_NDCache_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _nx_icmpv6_DAD_clear_NDCache_entry &rArr; _nx_nd_cache_find_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_nd_cache_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_perform_DAD
</UL>

<P><STRONG><a name="[1f6]"></a>_nx_icmpv6_dest_table_add</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, nx_icmpv6_dest_table_add.o(.text._nx_icmpv6_dest_table_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _nx_icmpv6_dest_table_add &rArr; _nx_nd_cache_add_entry &rArr; _nx_nd_cache_delete_internal &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_nd_cache_add_entry
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_find
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_nd_cache_find_entry
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>

<P><STRONG><a name="[1f7]"></a>_nx_icmpv6_dest_table_find</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, nx_icmpv6_dest_table_find.o(.text._nx_icmpv6_dest_table_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _nx_icmpv6_dest_table_find &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_add
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>

<P><STRONG><a name="[1fa]"></a>_nx_icmpv6_perform_DAD</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, nx_icmpv6_perform_dad.o(.text._nx_icmpv6_perform_DAD))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _nx_icmpv6_perform_DAD &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_DAD_clear_NDCache_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
</UL>

<P><STRONG><a name="[19c]"></a>_nx_icmpv6_send_error_message</STRONG> (Thumb, 360 bytes, Stack size 56 bytes, nx_icmpv6_send_error_message.o(.text._nx_icmpv6_send_error_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_Address_Type
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_UNSPECIFIED_ADDRESS
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_interface_find
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_timeout_check
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_process_fragment_option
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_process_routing_option
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_option_error
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[1fb]"></a>_nx_icmpv6_send_ns</STRONG> (Thumb, 332 bytes, Stack size 104 bytes, nx_icmpv6_send_ns.o(.text._nx_icmpv6_send_ns))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_header_add
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SOLICITED_NODE_MULTICAST_ADDRESS
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_address_change_endian
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_perform_DAD
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>

<P><STRONG><a name="[202]"></a>_nx_icmpv6_send_rs</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, nx_icmpv6_send_rs.o(.text._nx_icmpv6_send_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = _nx_icmpv6_send_rs &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_interface_find
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_router_solicitation_check
</UL>

<P><STRONG><a name="[220]"></a>_nx_igmp_multicast_check</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nx_igmp_multicast_check.o(.text._nx_igmp_multicast_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _nx_igmp_multicast_check
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv4_packet_receive
</UL>

<P><STRONG><a name="[203]"></a>_nx_invalidate_destination_entry</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, nx_invalidate_destination_entry.o(.text._nx_invalidate_destination_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _nx_invalidate_destination_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_prefix_router_timer_tick
</UL>

<P><STRONG><a name="[1eb]"></a>_nx_ip_checksum_compute</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, nx_ip_checksum_compute.o(.text._nx_ip_checksum_compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv4_packet_receive
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_rs
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_packet_process
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_header_add
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_retransmit
</UL>

<P><STRONG><a name="[204]"></a>_nx_ip_create</STRONG> (Thumb, 352 bytes, Stack size 64 bytes, nx_ip_create.o(.text._nx_ip_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = _nx_ip_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_preemption_change
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_identify
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_create
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_create
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_create
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_ip_create
</UL>

<P><STRONG><a name="[21e]"></a>_nx_ip_deferred_link_status_process</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, nx_ip_deferred_link_status_process.o(.text._nx_ip_deferred_link_status_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _nx_ip_deferred_link_status_process
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
</UL>

<P><STRONG><a name="[20b]"></a>_nx_ip_dispatch_process</STRONG> (Thumb, 496 bytes, Stack size 40 bytes, nx_ip_dispatch_process.o(.text._nx_ip_dispatch_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = _nx_ip_dispatch_process &rArr; _nx_ipv6_process_hop_by_hop_option &rArr; _nx_ipv6_option_error &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_process_hop_by_hop_option
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_process_fragment_option
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_process_routing_option
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_assembly
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv4_packet_receive
</UL>

<P><STRONG><a name="[132]"></a>_nx_ip_driver_deferred_processing</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nx_ip_driver_deferred_processing.o(.text._nx_ip_driver_deferred_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _nx_ip_driver_deferred_processing &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TxCpltCallback
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxCpltCallback
</UL>

<P><STRONG><a name="[20f]"></a>_nx_ip_driver_packet_send</STRONG> (Thumb, 582 bytes, Stack size 64 bytes, nx_ip_driver_packet_send.o(.text._nx_ip_driver_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _nx_ip_driver_packet_send &rArr; _nx_packet_copy &rArr; _nx_packet_data_append &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_copy
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_deferred_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
</UL>

<P><STRONG><a name="[214]"></a>_nx_ip_fast_periodic_timer_create</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, nx_ip_fast_periodic_timer_entry.o(.text._nx_ip_fast_periodic_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _nx_ip_fast_periodic_timer_create &rArr; _tx_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_enable
</UL>

<P><STRONG><a name="[b2]"></a>_nx_ip_fragment_assembly</STRONG> (Thumb, 956 bytes, Stack size 88 bytes, nx_ip_fragment_assembly.o(.text._nx_ip_fragment_assembly))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = _nx_ip_fragment_assembly &rArr; _nx_ip_dispatch_process &rArr; _nx_ipv6_process_hop_by_hop_option &rArr; _nx_ipv6_option_error &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_dispatch_process
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_ip_fragment_enable.o(.text._nx_ip_fragment_enable)
</UL>
<P><STRONG><a name="[25e]"></a>_nx_ip_fragment_enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nx_ip_fragment_enable.o(.text._nx_ip_fragment_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _nx_ip_fragment_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_ip_fragment_enable
</UL>

<P><STRONG><a name="[b3]"></a>_nx_ip_fragment_packet</STRONG> (Thumb, 616 bytes, Stack size 104 bytes, nx_ip_fragment_packet.o(.text._nx_ip_fragment_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _nx_ip_fragment_packet &rArr; _nx_packet_data_append &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_data_append
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_ip_fragment_enable.o(.text._nx_ip_fragment_enable)
</UL>
<P><STRONG><a name="[b1]"></a>_nx_ip_fragment_timeout_check</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, nx_ip_fragment_timeout_check.o(.text._nx_ip_fragment_timeout_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = _nx_ip_fragment_timeout_check &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_Address_Type
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_ip_fragment_enable.o(.text._nx_ip_fragment_enable)
</UL>
<P><STRONG><a name="[218]"></a>_nx_ip_header_add</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, nx_ip_header_add.o(.text._nx_ip_header_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _nx_ip_header_add &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
</UL>

<P><STRONG><a name="[22f]"></a>_nx_ip_initialize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nx_ip_initialize.o(.text._nx_ip_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_system_initialize
</UL>

<P><STRONG><a name="[211]"></a>_nx_ip_packet_deferred_receive</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, nx_ip_packet_deferred_receive.o(.text._nx_ip_packet_deferred_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _nx_ip_packet_deferred_receive &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_packet_send
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>

<P><STRONG><a name="[219]"></a>_nx_ip_packet_receive</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, nx_ip_packet_receive.o(.text._nx_ip_packet_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _nx_ip_packet_receive &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
</UL>

<P><STRONG><a name="[1f1]"></a>_nx_ip_packet_send</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, nx_ip_packet_send.o(.text._nx_ip_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = _nx_ip_packet_send &rArr; _nx_ip_driver_packet_send &rArr; _nx_packet_copy &rArr; _nx_packet_data_append &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_packet_send
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_route_find
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_header_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_process_echo_request
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_retransmit
</UL>

<P><STRONG><a name="[ae]"></a>_nx_ip_periodic_timer_entry</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nx_ip_periodic_timer_entry.o(.text._nx_ip_periodic_timer_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _nx_ip_periodic_timer_entry &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_ip_create.o(.text._nx_ip_create)
</UL>
<P><STRONG><a name="[1f0]"></a>_nx_ip_route_find</STRONG> (Thumb, 312 bytes, Stack size 20 bytes, nx_ip_route_find.o(.text._nx_ip_route_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _nx_ip_route_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_process_echo_request
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_relisten
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_no_connection_reset
</UL>

<P><STRONG><a name="[ad]"></a>_nx_ip_thread_entry</STRONG> (Thumb, 640 bytes, Stack size 64 bytes, nx_ip_thread_entry.o(.text._nx_ip_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = _nx_ip_thread_entry &rArr; _nxd_ipv6_router_solicitation_check &rArr; _nx_icmpv6_send_rs &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_get
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_deferred_link_status_process
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_multicast_join
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SOLICITED_NODE_MULTICAST_ADDRESS
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_perform_DAD
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_router_solicitation_check
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_prefix_router_timer_tick
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_ip_create.o(.text._nx_ip_create)
</UL>
<P><STRONG><a name="[21f]"></a>_nx_ipv4_option_process</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, nx_ipv4_option_process.o(.text._nx_ipv4_option_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = _nx_ipv4_option_process &rArr; _nx_icmpv4_send_error_message &rArr; _nx_ip_packet_send &rArr; _nx_ip_driver_packet_send &rArr; _nx_packet_copy &rArr; _nx_packet_data_append &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv4_packet_receive
</UL>

<P><STRONG><a name="[af]"></a>_nx_ipv4_packet_receive</STRONG> (Thumb, 754 bytes, Stack size 40 bytes, nx_ipv4_packet_receive.o(.text._nx_ipv4_packet_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = _nx_ipv4_packet_receive &rArr; _nx_ip_dispatch_process &rArr; _nx_ipv6_process_hop_by_hop_option &rArr; _nx_ipv6_option_error &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_dispatch_process
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_igmp_multicast_check
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv4_option_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_ip_create.o(.text._nx_ip_create)
</UL>
<P><STRONG><a name="[1ff]"></a>_nx_ipv6_address_change_endian</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, nx_ipv6_util.o(.text._nx_ipv6_address_change_endian))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _nx_ipv6_address_change_endian
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_header_add
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
</UL>

<P><STRONG><a name="[221]"></a>_nx_ipv6_fragment_process</STRONG> (Thumb, 532 bytes, Stack size 120 bytes, nx_ipv6_fragment_process.o(.text._nx_ipv6_fragment_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _nx_ipv6_fragment_process &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_copy
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>

<P><STRONG><a name="[201]"></a>_nx_ipv6_header_add</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, nx_ipv6_header_add.o(.text._nx_ipv6_header_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_address_change_endian
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>

<P><STRONG><a name="[21a]"></a>_nx_ipv6_multicast_join</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, nx_ipv6_multicast_join.o(.text._nx_ipv6_multicast_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _nx_ipv6_multicast_join &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
</UL>

<P><STRONG><a name="[223]"></a>_nx_ipv6_multicast_leave</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, nx_ipv6_multicast_leave.o(.text._nx_ipv6_multicast_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _nx_ipv6_multicast_leave &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_prefix_list_delete_entry
</UL>

<P><STRONG><a name="[224]"></a>_nx_ipv6_option_error</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nx_ipv6_option_error.o(.text._nx_ipv6_option_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = _nx_ipv6_option_error &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_process_hop_by_hop_option
</UL>

<P><STRONG><a name="[222]"></a>_nx_ipv6_packet_copy</STRONG> (Thumb, 344 bytes, Stack size 52 bytes, nx_ipv6_packet_copy.o(.text._nx_ipv6_packet_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _nx_ipv6_packet_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_fragment_process
</UL>

<P><STRONG><a name="[1fe]"></a>_nx_ipv6_packet_send</STRONG> (Thumb, 602 bytes, Stack size 104 bytes, nx_ipv6_packet_send.o(.text._nx_ipv6_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_copy
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_fragment_process
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_header_add
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_router_lookup
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_Address_Type
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_find
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_add
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_deferred_receive
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_search_onlink
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_UNSPECIFIED_ADDRESS
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_rs
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_retransmit
</UL>

<P><STRONG><a name="[228]"></a>_nx_ipv6_prefix_list_delete_entry</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, nx_ipv6_prefix_list_delete_entry.o(.text._nx_ipv6_prefix_list_delete_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _nx_ipv6_prefix_list_delete_entry &rArr; _nx_ipv6_multicast_leave &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SOLICITED_NODE_MULTICAST_ADDRESS
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_UNSPECIFIED_ADDRESS
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_multicast_leave
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_prefix_router_timer_tick
</UL>

<P><STRONG><a name="[20d]"></a>_nx_ipv6_process_fragment_option</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, nx_ipv6_process_fragment_option.o(.text._nx_ipv6_process_fragment_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = _nx_ipv6_process_fragment_option &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_dispatch_process
</UL>

<P><STRONG><a name="[20e]"></a>_nx_ipv6_process_hop_by_hop_option</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, nx_ipv6_process_hop_by_hop_option.o(.text._nx_ipv6_process_hop_by_hop_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = _nx_ipv6_process_hop_by_hop_option &rArr; _nx_ipv6_option_error &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_option_error
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_dispatch_process
</UL>

<P><STRONG><a name="[20c]"></a>_nx_ipv6_process_routing_option</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nx_ipv6_process_routing_option.o(.text._nx_ipv6_process_routing_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = _nx_ipv6_process_routing_option &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_dispatch_process
</UL>

<P><STRONG><a name="[1f9]"></a>_nx_nd_cache_add_entry</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, nx_nd_cache_add_entry.o(.text._nx_nd_cache_add_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _nx_nd_cache_add_entry &rArr; _nx_nd_cache_delete_internal &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_nd_cache_delete_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_add
</UL>

<P><STRONG><a name="[229]"></a>_nx_nd_cache_delete_internal</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, nx_nd_cache_delete_internal.o(.text._nx_nd_cache_delete_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _nx_nd_cache_delete_internal &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_nd_cache_add_entry
</UL>

<P><STRONG><a name="[1f5]"></a>_nx_nd_cache_find_entry</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, nx_nd_cache_find_entry.o(.text._nx_nd_cache_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _nx_nd_cache_find_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_add
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_DAD_clear_NDCache_entry
</UL>

<P><STRONG><a name="[1e9]"></a>_nx_packet_allocate</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, nx_packet_allocate.o(.text._nx_packet_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_packet
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_copy
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_rs
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_fragment_process
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_data_append
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_send
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_allocate
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
</UL>

<P><STRONG><a name="[210]"></a>_nx_packet_copy</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, nx_packet_copy.o(.text._nx_packet_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _nx_packet_copy &rArr; _nx_packet_data_append &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_data_append
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_packet_send
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>

<P><STRONG><a name="[216]"></a>_nx_packet_data_append</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, nx_packet_data_append.o(.text._nx_packet_data_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _nx_packet_data_append &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_packet
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_copy
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
</UL>

<P><STRONG><a name="[22b]"></a>_nx_packet_data_retrieve</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nx_packet_data_retrieve.o(.text._nx_packet_data_retrieve))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _nx_packet_data_retrieve &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_data_retrieve
</UL>

<P><STRONG><a name="[b4]"></a>_nx_packet_pool_cleanup</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, nx_packet_pool_cleanup.o(.text._nx_packet_pool_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _nx_packet_pool_cleanup &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_packet_allocate.o(.text._nx_packet_allocate)
</UL>
<P><STRONG><a name="[22c]"></a>_nx_packet_pool_create</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, nx_packet_pool_create.o(.text._nx_packet_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _nx_packet_pool_create
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_pool_create
</UL>

<P><STRONG><a name="[22e]"></a>_nx_packet_pool_initialize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nx_packet_pool_initialize.o(.text._nx_packet_pool_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_system_initialize
</UL>

<P><STRONG><a name="[1e3]"></a>_nx_packet_release</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, nx_packet_release.o(.text._nx_packet_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_release
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_packet
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_timeout_check
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_assembly
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_copy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv4_packet_receive
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_rs
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_fragment_process
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_process_echo_reply
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmp_packet_process
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_data_append
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmp_packet_receive
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_packet_process
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_receive
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_rarp_packet_deferred_receive
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_deferred_receive
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_receive_queue_flush
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_receive
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_packet_receive
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_trim_front
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_trim
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_check
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_ack_check
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_transmit_queue_flush
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_relisten
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_receive
</UL>

<P><STRONG><a name="[1e0]"></a>_nx_packet_transmit_release</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nx_packet_transmit_release.o(.text._nx_packet_transmit_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_packet
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_packet_send
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_fragment_process
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_header_add
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_periodic_update
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_queue_send
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_dynamic_entry_delete
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_transmit_release
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_nd_cache_delete_internal
</UL>

<P><STRONG><a name="[22d]"></a>_nx_rarp_packet_deferred_receive</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, nx_rarp_packet_deferred_receive.o(.text._nx_rarp_packet_deferred_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _nx_rarp_packet_deferred_receive &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[183]"></a>_nx_system_initialize</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nx_system_initialize.o(.text._nx_system_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _nx_system_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_initialize
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_pool_initialize
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[b5]"></a>_nx_tcp_cleanup_deferred</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nx_tcp_cleanup_deferred.o(.text._nx_tcp_cleanup_deferred))
<BR>[Address Reference Count : 3]<UL><LI> nx_tcp_disconnect_cleanup.o(.text._nx_tcp_disconnect_cleanup)
<LI> nx_tcp_receive_cleanup.o(.text._nx_tcp_receive_cleanup)
<LI> nx_tcp_transmit_cleanup.o(.text._nx_tcp_transmit_cleanup)
</UL>
<P><STRONG><a name="[231]"></a>_nx_tcp_client_bind_cleanup</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, nx_tcp_client_bind_cleanup.o(.text._nx_tcp_client_bind_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _nx_tcp_client_bind_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_deferred_cleanup_check
</UL>

<P><STRONG><a name="[bb]"></a>_nx_tcp_connect_cleanup</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, nx_tcp_connect_cleanup.o(.text._nx_tcp_connect_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _nx_tcp_connect_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_deferred_cleanup_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_server_socket_accept.o(.text._nx_tcp_server_socket_accept)
</UL>
<P><STRONG><a name="[b7]"></a>_nx_tcp_deferred_cleanup_check</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, nx_tcp_deferred_cleanup_check.o(.text._nx_tcp_deferred_cleanup_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _nx_tcp_deferred_cleanup_check &rArr; _nx_tcp_connect_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_connect_cleanup
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_client_bind_cleanup
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_transmit_cleanup
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_receive_cleanup
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_disconnect_cleanup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_enable.o(.text._nx_tcp_enable)
</UL>
<P><STRONG><a name="[bc]"></a>_nx_tcp_disconnect_cleanup</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, nx_tcp_disconnect_cleanup.o(.text._nx_tcp_disconnect_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _nx_tcp_disconnect_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_unaccept
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_deferred_cleanup_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_socket_disconnect.o(.text._nx_tcp_socket_disconnect)
</UL>
<P><STRONG><a name="[232]"></a>_nx_tcp_enable</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, nx_tcp_enable.o(.text._nx_tcp_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _nx_tcp_enable &rArr; _nx_ip_fast_periodic_timer_create &rArr; _tx_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fast_periodic_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_enable
</UL>

<P><STRONG><a name="[b8]"></a>_nx_tcp_fast_periodic_processing</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, nx_tcp_fast_periodic_processing.o(.text._nx_tcp_fast_periodic_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = _nx_tcp_fast_periodic_processing &rArr; _nx_tcp_socket_retransmit &rArr; _nx_tcp_packet_send_probe &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_block_cleanup
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_fin
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_retransmit
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_syn
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_enable.o(.text._nx_tcp_enable)
</UL>
<P><STRONG><a name="[230]"></a>_nx_tcp_initialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nx_tcp_initialize.o(.text._nx_tcp_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_system_initialize
</UL>

<P><STRONG><a name="[23a]"></a>_nx_tcp_mss_option_get</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, nx_tcp_mss_option_get.o(.text._nx_tcp_mss_option_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _nx_tcp_mss_option_get
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_relisten
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
</UL>

<P><STRONG><a name="[19f]"></a>_nx_tcp_no_connection_reset</STRONG> (Thumb, 150 bytes, Stack size 368 bytes, nx_tcp_no_connection_reset.o(.text._nx_tcp_no_connection_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = _nx_tcp_no_connection_reset &rArr; _nx_tcp_packet_send_rst &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_route_find
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_rst
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[239]"></a>_nx_tcp_packet_process</STRONG> (Thumb, 1238 bytes, Stack size 64 bytes, nx_tcp_packet_process.o(.text._nx_tcp_packet_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = _nx_tcp_packet_process &rArr; OUTLINED_FUNCTION_0 &rArr; _nx_tcp_no_connection_reset &rArr; _nx_tcp_packet_send_rst &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_Address_Type
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_route_find
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_mss_option_get
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_syn
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_receive
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_queue_process
</UL>

<P><STRONG><a name="[ba]"></a>_nx_tcp_packet_receive</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, nx_tcp_packet_receive.o(.text._nx_tcp_packet_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = _nx_tcp_packet_receive &rArr; _nx_tcp_packet_process &rArr; OUTLINED_FUNCTION_0 &rArr; _nx_tcp_no_connection_reset &rArr; _nx_tcp_packet_send_rst &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_enable.o(.text._nx_tcp_enable)
</UL>
<P><STRONG><a name="[1aa]"></a>_nx_tcp_packet_send_ack</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nx_tcp_packet_send_ack.o(.text._nx_tcp_packet_send_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_receive
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_fin_wait1
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_established
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_fin_wait2
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_sent
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_ack_check
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_periodic_processing
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_fast_periodic_processing
</UL>

<P><STRONG><a name="[23c]"></a>_nx_tcp_packet_send_control</STRONG> (Thumb, 430 bytes, Stack size 56 bytes, nx_tcp_packet_send_control.o(.text._nx_tcp_packet_send_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_probe
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_rst
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_fin
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_syn
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
</UL>

<P><STRONG><a name="[1a3]"></a>_nx_tcp_packet_send_fin</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, nx_tcp_packet_send_fin.o(.text._nx_tcp_packet_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = _nx_tcp_packet_send_fin &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_fast_periodic_processing
</UL>

<P><STRONG><a name="[23d]"></a>_nx_tcp_packet_send_probe</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, nx_tcp_packet_send_probe.o(.text._nx_tcp_packet_send_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _nx_tcp_packet_send_probe &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_retransmit
</UL>

<P><STRONG><a name="[238]"></a>_nx_tcp_packet_send_rst</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, nx_tcp_packet_send_rst.o(.text._nx_tcp_packet_send_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = _nx_tcp_packet_send_rst &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_received
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_sent
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_no_connection_reset
</UL>

<P><STRONG><a name="[235]"></a>_nx_tcp_packet_send_syn</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, nx_tcp_packet_send_syn.o(.text._nx_tcp_packet_send_syn))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _nx_tcp_packet_send_syn &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_sent
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_accept
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_fast_periodic_processing
</UL>

<P><STRONG><a name="[b9]"></a>_nx_tcp_periodic_processing</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, nx_tcp_periodic_processing.o(.text._nx_tcp_periodic_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = _nx_tcp_periodic_processing &rArr; _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_enable.o(.text._nx_tcp_enable)
</UL>
<P><STRONG><a name="[b6]"></a>_nx_tcp_queue_process</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nx_tcp_queue_process.o(.text._nx_tcp_queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = _nx_tcp_queue_process &rArr; _nx_tcp_packet_process &rArr; OUTLINED_FUNCTION_0 &rArr; _nx_tcp_no_connection_reset &rArr; _nx_tcp_packet_send_rst &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_enable.o(.text._nx_tcp_enable)
</UL>
<P><STRONG><a name="[bd]"></a>_nx_tcp_receive_cleanup</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, nx_tcp_receive_cleanup.o(.text._nx_tcp_receive_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _nx_tcp_receive_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_established
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_deferred_cleanup_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_socket_receive.o(.text._nx_tcp_socket_receive)
</UL>
<P><STRONG><a name="[23e]"></a>_nx_tcp_server_socket_accept</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, nx_tcp_server_socket_accept.o(.text._nx_tcp_server_socket_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = _nx_tcp_server_socket_accept &rArr; _nx_tcp_packet_send_syn &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_suspend
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_syn
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_server_socket_accept
</UL>

<P><STRONG><a name="[241]"></a>_nx_tcp_server_socket_listen</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, nx_tcp_server_socket_listen.o(.text._nx_tcp_server_socket_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _nx_tcp_server_socket_listen &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_server_socket_listen
</UL>

<P><STRONG><a name="[242]"></a>_nx_tcp_server_socket_relisten</STRONG> (Thumb, 468 bytes, Stack size 56 bytes, nx_tcp_server_socket_relisten.o(.text._nx_tcp_server_socket_relisten))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _nx_tcp_server_socket_relisten &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_route_find
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_mss_option_get
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_server_socket_relisten
</UL>

<P><STRONG><a name="[243]"></a>_nx_tcp_server_socket_unaccept</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, nx_tcp_server_socket_unaccept.o(.text._nx_tcp_server_socket_unaccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _nx_tcp_server_socket_unaccept &rArr; _nx_tcp_disconnect_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_receive_queue_flush
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_UNSPECIFIED_ADDRESS
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_disconnect_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_server_socket_unaccept
</UL>

<P><STRONG><a name="[237]"></a>_nx_tcp_socket_block_cleanup</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nx_tcp_socket_block_cleanup.o(.text._nx_tcp_socket_block_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _nx_tcp_socket_block_cleanup
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_UNSPECIFIED_ADDRESS
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_last_ack
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_fast_periodic_processing
</UL>

<P><STRONG><a name="[233]"></a>_nx_tcp_socket_connection_reset</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, nx_tcp_socket_connection_reset.o(.text._nx_tcp_socket_connection_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _nx_tcp_socket_connection_reset &rArr; _nx_tcp_connect_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_connect_cleanup
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_receive_queue_flush
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_block_cleanup
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_transmit_queue_flush
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_transmit_cleanup
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_receive_cleanup
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_disconnect_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_sent
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_periodic_processing
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_fast_periodic_processing
</UL>

<P><STRONG><a name="[246]"></a>_nx_tcp_socket_create</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, nx_tcp_socket_create.o(.text._nx_tcp_socket_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _nx_tcp_socket_create &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_create
</UL>

<P><STRONG><a name="[247]"></a>_nx_tcp_socket_disconnect</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, nx_tcp_socket_disconnect.o(.text._nx_tcp_socket_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = _nx_tcp_socket_disconnect &rArr; OUTLINED_FUNCTION_0 &rArr; _nx_tcp_packet_send_fin &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_connect_cleanup
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_block_cleanup
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_suspend
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_transmit_queue_flush
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_rst
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_fin
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_transmit_cleanup
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_receive_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_disconnect
</UL>

<P><STRONG><a name="[248]"></a>_nx_tcp_socket_info_get</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, nx_tcp_socket_info_get.o(.text._nx_tcp_socket_info_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _nx_tcp_socket_info_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_info_get
</UL>

<P><STRONG><a name="[23b]"></a>_nx_tcp_socket_packet_process</STRONG> (Thumb, 492 bytes, Stack size 48 bytes, nx_tcp_socket_packet_process.o(.text._nx_tcp_socket_packet_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = _nx_tcp_socket_packet_process &rArr; _nx_tcp_socket_state_ack_check &rArr; _nx_tcp_socket_retransmit &rArr; _nx_tcp_packet_send_probe &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_fin_wait1
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_transmit_check
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_established
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_last_ack
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_closing
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_received
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_fin_wait2
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_sent
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_ack_check
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_rst
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_mss_option_get
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
</UL>

<P><STRONG><a name="[252]"></a>_nx_tcp_socket_receive</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, nx_tcp_socket_receive.o(.text._nx_tcp_socket_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = _nx_tcp_socket_receive &rArr; _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_suspend
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_receive
</UL>

<P><STRONG><a name="[244]"></a>_nx_tcp_socket_receive_queue_flush</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nx_tcp_socket_receive_queue_flush.o(.text._nx_tcp_socket_receive_queue_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _nx_tcp_socket_receive_queue_flush &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_unaccept
</UL>

<P><STRONG><a name="[236]"></a>_nx_tcp_socket_retransmit</STRONG> (Thumb, 708 bytes, Stack size 80 bytes, nx_tcp_socket_retransmit.o(.text._nx_tcp_socket_retransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = _nx_tcp_socket_retransmit &rArr; _nx_tcp_packet_send_probe &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_probe
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_ack_check
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_fast_periodic_processing
</UL>

<P><STRONG><a name="[261]"></a>_nx_tcp_socket_send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nx_tcp_socket_send.o(.text._nx_tcp_socket_send))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_send
</UL>

<P><STRONG><a name="[253]"></a>_nx_tcp_socket_send_internal</STRONG> (Thumb, 1452 bytes, Stack size 128 bytes, nx_tcp_socket_send_internal.o(.text._nx_tcp_socket_send_internal), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_preemption_change
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_info_get
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_data_append
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_suspend
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_wait
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[249]"></a>_nx_tcp_socket_state_ack_check</STRONG> (Thumb, 918 bytes, Stack size 40 bytes, nx_tcp_socket_state_ack_check.o(.text._nx_tcp_socket_state_ack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = _nx_tcp_socket_state_ack_check &rArr; _nx_tcp_socket_retransmit &rArr; _nx_tcp_packet_send_probe &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_retransmit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[24d]"></a>_nx_tcp_socket_state_closing</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, nx_tcp_socket_state_closing.o(.text._nx_tcp_socket_state_closing))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _nx_tcp_socket_state_closing &rArr; _nx_tcp_socket_thread_resume &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[1a5]"></a>_nx_tcp_socket_state_data_check</STRONG> (Thumb, 896 bytes, Stack size 56 bytes, nx_tcp_socket_state_data_check.o(.text._nx_tcp_socket_state_data_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = _nx_tcp_socket_state_data_check &rArr; OUTLINED_FUNCTION_0 &rArr; _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_trim_front
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_trim
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[259]"></a>_nx_tcp_socket_state_data_trim</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, nx_tcp_socket_state_data_check.o(.text._nx_tcp_socket_state_data_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _nx_tcp_socket_state_data_trim &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_check
</UL>

<P><STRONG><a name="[258]"></a>_nx_tcp_socket_state_data_trim_front</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, nx_tcp_socket_state_data_check.o(.text._nx_tcp_socket_state_data_trim_front))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _nx_tcp_socket_state_data_trim_front &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_check
</UL>

<P><STRONG><a name="[24f]"></a>_nx_tcp_socket_state_established</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, nx_tcp_socket_state_established.o(.text._nx_tcp_socket_state_established))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _nx_tcp_socket_state_established &rArr; _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_receive_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[251]"></a>_nx_tcp_socket_state_fin_wait1</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, nx_tcp_socket_state_fin_wait1.o(.text._nx_tcp_socket_state_fin_wait1))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _nx_tcp_socket_state_fin_wait1 &rArr; _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[24b]"></a>_nx_tcp_socket_state_fin_wait2</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, nx_tcp_socket_state_fin_wait2.o(.text._nx_tcp_socket_state_fin_wait2))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _nx_tcp_socket_state_fin_wait2 &rArr; _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[24e]"></a>_nx_tcp_socket_state_last_ack</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nx_tcp_socket_state_last_ack.o(.text._nx_tcp_socket_state_last_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _nx_tcp_socket_state_last_ack &rArr; _nx_tcp_socket_thread_resume &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_block_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[24c]"></a>_nx_tcp_socket_state_syn_received</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, nx_tcp_socket_state_syn_received.o(.text._nx_tcp_socket_state_syn_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _nx_tcp_socket_state_syn_received &rArr; _nx_tcp_packet_send_rst &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[24a]"></a>_nx_tcp_socket_state_syn_sent</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, nx_tcp_socket_state_syn_sent.o(.text._nx_tcp_socket_state_syn_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = _nx_tcp_socket_state_syn_sent &rArr; _nx_tcp_packet_send_syn &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_rst
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_syn
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[250]"></a>_nx_tcp_socket_state_transmit_check</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nx_tcp_socket_state_transmit_check.o(.text._nx_tcp_socket_state_transmit_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _nx_tcp_socket_state_transmit_check &rArr; _nx_tcp_socket_thread_resume &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[254]"></a>_nx_tcp_socket_state_wait</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nx_tcp_socket_state_wait.o(.text._nx_tcp_socket_state_wait), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
</UL>

<P><STRONG><a name="[257]"></a>_nx_tcp_socket_thread_resume</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, nx_tcp_socket_thread_resume.o(.text._nx_tcp_socket_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _nx_tcp_socket_thread_resume &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_check
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_fin_wait1
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_transmit_check
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_last_ack
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_closing
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_received
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_fin_wait2
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_sent
</UL>

<P><STRONG><a name="[240]"></a>_nx_tcp_socket_thread_suspend</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, nx_tcp_socket_thread_suspend.o(.text._nx_tcp_socket_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _nx_tcp_socket_thread_suspend &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_receive
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_accept
</UL>

<P><STRONG><a name="[245]"></a>_nx_tcp_socket_transmit_queue_flush</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, nx_tcp_socket_transmit_queue_flush.o(.text._nx_tcp_socket_transmit_queue_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _nx_tcp_socket_transmit_queue_flush &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
</UL>

<P><STRONG><a name="[be]"></a>_nx_tcp_transmit_cleanup</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, nx_tcp_transmit_cleanup.o(.text._nx_tcp_transmit_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _nx_tcp_transmit_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_deferred_cleanup_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_socket_send_internal.o(.text._nx_tcp_socket_send_internal)
</UL>
<P><STRONG><a name="[262]"></a>_nx_udp_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nx_udp_enable.o(.text._nx_udp_enable))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_udp_enable
</UL>

<P><STRONG><a name="[bf]"></a>_nx_udp_packet_receive</STRONG> (Thumb, 628 bytes, Stack size 40 bytes, nx_udp_packet_receive.o(.text._nx_udp_packet_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = _nx_udp_packet_receive &rArr; OUTLINED_FUNCTION_0 &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_udp_enable.o(.text._nx_udp_enable)
</UL>
<P><STRONG><a name="[263]"></a>_nx_udp_source_extract</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nx_udp_source_extract.o(.text._nx_udp_source_extract))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_udp_source_extract
</UL>

<P><STRONG><a name="[25c]"></a>_nxd_ipv6_find_max_prefix_length</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, nxd_ipv6_find_max_prefix_length.o(.text._nxd_ipv6_find_max_prefix_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _nxd_ipv6_find_max_prefix_length
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_interface_find
</UL>

<P><STRONG><a name="[1fd]"></a>_nxd_ipv6_interface_find</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, nxd_ipv6_interface_find.o(.text._nxd_ipv6_interface_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _nxd_ipv6_interface_find &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_Address_Type
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_find_max_prefix_length
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_rs
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
</UL>

<P><STRONG><a name="[21c]"></a>_nxd_ipv6_prefix_router_timer_tick</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, nxd_ipv6_prefix_router_timer_tick.o(.text._nxd_ipv6_prefix_router_timer_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _nxd_ipv6_prefix_router_timer_tick &rArr; _nx_ipv6_prefix_list_delete_entry &rArr; _nx_ipv6_multicast_leave &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_invalidate_destination_entry
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_prefix_list_delete_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
</UL>

<P><STRONG><a name="[227]"></a>_nxd_ipv6_router_lookup</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, nxd_ipv6_router_lookup.o(.text._nxd_ipv6_router_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _nxd_ipv6_router_lookup &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>

<P><STRONG><a name="[21d]"></a>_nxd_ipv6_router_solicitation_check</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, nxd_ipv6_router_solicitation_check.o(.text._nxd_ipv6_router_solicitation_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = _nxd_ipv6_router_solicitation_check &rArr; _nx_icmpv6_send_rs &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_rs
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
</UL>

<P><STRONG><a name="[226]"></a>_nxd_ipv6_search_onlink</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nxd_ipv6_search_onlink.o(.text._nxd_ipv6_search_onlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _nxd_ipv6_search_onlink &rArr; CHECK_IP_ADDRESSES_BY_PREFIX &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_Address_Type
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IP_ADDRESSES_BY_PREFIX
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>

<P><STRONG><a name="[186]"></a>_nxe_arp_enable</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nxe_arp_enable.o(.text._nxe_arp_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _nxe_arp_enable &rArr; _nx_arp_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[18a]"></a>_nxe_icmp_enable</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, nxe_icmp_enable.o(.text._nxe_icmp_enable))
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmp_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[185]"></a>_nxe_ip_create</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, nxe_ip_create.o(.text._nxe_ip_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = _nxe_ip_create &rArr; _nx_ip_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_preemption_change
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_identify
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_create
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[187]"></a>_nxe_ip_fragment_enable</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, nxe_ip_fragment_enable.o(.text._nxe_ip_fragment_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _nxe_ip_fragment_enable &rArr; _nx_ip_fragment_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[25f]"></a>_nxe_packet_allocate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nxe_packet_allocate.o(.text._nxe_packet_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _nxe_packet_allocate &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[196]"></a>_nxe_packet_data_retrieve</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nxe_packet_data_retrieve.o(.text._nxe_packet_data_retrieve))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _nxe_packet_data_retrieve &rArr; _nx_packet_data_retrieve &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_data_retrieve
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[184]"></a>_nxe_packet_pool_create</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, nxe_packet_pool_create.o(.text._nxe_packet_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _nxe_packet_pool_create &rArr; _tx_thread_preemption_change &rArr; _tx_thread_system_preempt_check &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_preemption_change
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_identify
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_pool_create
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[198]"></a>_nxe_packet_release</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nxe_packet_release.o(.text._nxe_packet_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _nxe_packet_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[260]"></a>_nxe_packet_transmit_release</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nxe_packet_transmit_release.o(.text._nxe_packet_transmit_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _nxe_packet_transmit_release &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[188]"></a>_nxe_tcp_enable</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, nxe_tcp_enable.o(.text._nxe_tcp_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _nxe_tcp_enable &rArr; _nx_tcp_enable &rArr; _nx_ip_fast_periodic_timer_create &rArr; _tx_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[18f]"></a>_nxe_tcp_server_socket_accept</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, nxe_tcp_server_socket_accept.o(.text._nxe_tcp_server_socket_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = _nxe_tcp_server_socket_accept &rArr; _nx_tcp_server_socket_accept &rArr; _nx_tcp_packet_send_syn &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[18d]"></a>_nxe_tcp_server_socket_listen</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, nxe_tcp_server_socket_listen.o(.text._nxe_tcp_server_socket_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _nxe_tcp_server_socket_listen &rArr; _nx_tcp_server_socket_listen &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_listen
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[194]"></a>_nxe_tcp_server_socket_relisten</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, nxe_tcp_server_socket_relisten.o(.text._nxe_tcp_server_socket_relisten))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = _nxe_tcp_server_socket_relisten &rArr; _nx_tcp_server_socket_relisten &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_relisten
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[193]"></a>_nxe_tcp_server_socket_unaccept</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, nxe_tcp_server_socket_unaccept.o(.text._nxe_tcp_server_socket_unaccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _nxe_tcp_server_socket_unaccept &rArr; _nx_tcp_server_socket_unaccept &rArr; _nx_tcp_disconnect_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_unaccept
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[18c]"></a>_nxe_tcp_socket_create</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, nxe_tcp_socket_create.o(.text._nxe_tcp_socket_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _nxe_tcp_socket_create &rArr; _nx_tcp_socket_create &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_create
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[192]"></a>_nxe_tcp_socket_disconnect</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, nxe_tcp_socket_disconnect.o(.text._nxe_tcp_socket_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = _nxe_tcp_socket_disconnect &rArr; _nx_tcp_socket_disconnect &rArr; OUTLINED_FUNCTION_0 &rArr; _nx_tcp_packet_send_fin &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[190]"></a>_nxe_tcp_socket_info_get</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, nxe_tcp_socket_info_get.o(.text._nxe_tcp_socket_info_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = _nxe_tcp_socket_info_get &rArr; _nx_tcp_socket_info_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[191]"></a>_nxe_tcp_socket_receive</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, nxe_tcp_socket_receive.o(.text._nxe_tcp_socket_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = _nxe_tcp_socket_receive &rArr; _nx_tcp_socket_receive &rArr; _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[197]"></a>_nxe_tcp_socket_send</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, nxe_tcp_socket_send.o(.text._nxe_tcp_socket_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _nxe_tcp_socket_send
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[189]"></a>_nxe_udp_enable</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, nxe_udp_enable.o(.text._nxe_udp_enable))
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[195]"></a>_nxe_udp_source_extract</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nxe_udp_source_extract.o(.text._nxe_udp_source_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _nxe_udp_source_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_source_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[c0]"></a>_tx_event_flags_cleanup</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, tx_event_flags_cleanup.o(.text._tx_event_flags_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _tx_event_flags_cleanup &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_event_flags_get.o(.text._tx_event_flags_get)
</UL>
<P><STRONG><a name="[206]"></a>_tx_event_flags_create</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tx_event_flags_create.o(.text._tx_event_flags_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _tx_event_flags_create
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_create
</UL>

<P><STRONG><a name="[21b]"></a>_tx_event_flags_get</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, tx_event_flags_get.o(.text._tx_event_flags_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _tx_event_flags_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
</UL>

<P><STRONG><a name="[1e4]"></a>_tx_event_flags_set</STRONG> (Thumb, 476 bytes, Stack size 56 bytes, tx_event_flags_set.o(.text._tx_event_flags_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fast_periodic_timer_entry
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_process_fragment_option
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv4_packet_receive
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_periodic_timer_entry
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmp_packet_receive
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_deferred_processing
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_rarp_packet_deferred_receive
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_deferred_receive
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_deferred_receive
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_connect_cleanup
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_client_bind_cleanup
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_receive
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_transmit_cleanup
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_receive_cleanup
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_disconnect_cleanup
</UL>

<P><STRONG><a name="[264]"></a>_tx_initialize_high_level</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tx_initialize_high_level.o(.text._tx_initialize_high_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = _tx_initialize_high_level &rArr; _tx_timer_initialize &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_initialize
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[267]"></a>_tx_initialize_kernel_enter</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tx_initialize_kernel_enter.o(.text._tx_initialize_kernel_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = _tx_initialize_kernel_enter &rArr; _tx_initialize_high_level &rArr; _tx_timer_initialize &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_application_define
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_schedule
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_low_level
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_high_level
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>_tx_mutex_cleanup</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, tx_mutex_cleanup.o(.text._tx_mutex_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _tx_mutex_cleanup &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_mutex_get.o(.text._tx_mutex_get)
</UL>
<P><STRONG><a name="[205]"></a>_tx_mutex_create</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tx_mutex_create.o(.text._tx_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _tx_mutex_create
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_create
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_create
</UL>

<P><STRONG><a name="[1a8]"></a>_tx_mutex_get</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, tx_mutex_get.o(.text._tx_mutex_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_create
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_get
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_multicast_join
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_multicast_leave
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_packet_receive
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_receive
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_info_get
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_create
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_unaccept
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_relisten
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_listen
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_accept
</UL>

<P><STRONG><a name="[26c]"></a>_tx_mutex_prioritize</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, tx_mutex_prioritize.o(.text._tx_mutex_prioritize))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _tx_mutex_prioritize &rArr; _tx_thread_system_preempt_check &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>

<P><STRONG><a name="[26b]"></a>_tx_mutex_priority_change</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, tx_mutex_priority_change.o(.text._tx_mutex_priority_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>

<P><STRONG><a name="[1a1]"></a>_tx_mutex_put</STRONG> (Thumb, 472 bytes, Stack size 24 bytes, tx_mutex_put.o(.text._tx_mutex_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_prioritize
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_create
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_put
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_thread_release
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_multicast_join
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_suspend
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_multicast_leave
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_packet_receive
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_info_get
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_create
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_unaccept
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_relisten
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_listen
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_accept
</UL>

<P><STRONG><a name="[c1]"></a>_tx_mutex_thread_release</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tx_mutex_cleanup.o(.text._tx_mutex_thread_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _tx_mutex_thread_release &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_mutex_create.o(.text._tx_mutex_create)
</UL>
<P><STRONG><a name="[c3]"></a>_tx_semaphore_cleanup</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _tx_semaphore_cleanup &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_semaphore_get.o(.text._tx_semaphore_get)
</UL>
<P><STRONG><a name="[26d]"></a>_tx_semaphore_create</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tx_semaphore_create.o(.text._tx_semaphore_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _tx_semaphore_create
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_create
</UL>

<P><STRONG><a name="[26e]"></a>_tx_semaphore_get</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, tx_semaphore_get.o(.text._tx_semaphore_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_get
</UL>

<P><STRONG><a name="[26f]"></a>_tx_semaphore_put</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tx_semaphore_put.o(.text._tx_semaphore_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _tx_semaphore_put &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_put
</UL>

<P><STRONG><a name="[209]"></a>_tx_thread_create</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, tx_thread_create.o(.text._tx_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_build
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_initialize
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_create
</UL>

<P><STRONG><a name="[207]"></a>_tx_thread_identify</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tx_thread_identify.o(.text._tx_thread_identify))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_ip_create
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_pool_create
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_create
</UL>

<P><STRONG><a name="[256]"></a>_tx_thread_info_get</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tx_thread_info_get.o(.text._tx_thread_info_get), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
</UL>

<P><STRONG><a name="[265]"></a>_tx_thread_initialize</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tx_thread_initialize.o(.text._tx_thread_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _tx_thread_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_high_level
</UL>

<P><STRONG><a name="[208]"></a>_tx_thread_preemption_change</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, tx_thread_preemption_change.o(.text._tx_thread_preemption_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _tx_thread_preemption_change &rArr; _tx_thread_system_preempt_check &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_ip_create
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_pool_create
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_create
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
</UL>

<P><STRONG><a name="[271]"></a>_tx_thread_priority_change</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, tx_thread_priority_change.o(.text._tx_thread_priority_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _tx_thread_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_priority_change
</UL>

<P><STRONG><a name="[c5]"></a>_tx_thread_shell_entry</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, tx_thread_shell_entry.o(.text._tx_thread_shell_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _tx_thread_shell_entry &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_thread_create.o(.text._tx_thread_create)
</UL>
<P><STRONG><a name="[ec]"></a>_tx_thread_sleep</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, tx_thread_sleep.o(.text._tx_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNetXPro
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskGUI
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUserIF
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgPro
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStat
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_packet_send
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_header_add
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_router_lookup
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_find
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_add
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_interface_find
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_send
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_header_add
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_wait
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
</UL>

<P><STRONG><a name="[273]"></a>_tx_thread_stack_analyze</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, tx_thread_stack_analyze.o(.text._tx_thread_stack_analyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _tx_thread_stack_analyze
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_time_slice
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>

<P><STRONG><a name="[272]"></a>_tx_thread_stack_error_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tx_thread_stack_error_handler.o(.text._tx_thread_stack_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tx_thread_stack_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_time_slice
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>

<P><STRONG><a name="[1ef]"></a>_tx_thread_system_preempt_check</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, tx_thread_system_preempt_check.o(.text._tx_thread_system_preempt_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _tx_thread_system_preempt_check &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_analyze
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_create
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_create
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_priority_change
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_preemption_change
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_prioritize
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_process_echo_reply
</UL>

<P><STRONG><a name="[1ee]"></a>_tx_thread_system_resume</STRONG> (Thumb, 536 bytes, Stack size 24 bytes, tx_thread_system_resume.o(.text._tx_thread_system_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_deactivate
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_analyze
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_expiration_process
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_priority_change
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_timeout
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_put
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_cleanup
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_cleanup
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_cleanup
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_process_echo_reply
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_connect_cleanup
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_client_bind_cleanup
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_pool_cleanup
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_packet_receive
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_transmit_cleanup
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_receive_cleanup
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_disconnect_cleanup
</UL>

<P><STRONG><a name="[22a]"></a>_tx_thread_system_suspend</STRONG> (Thumb, 588 bytes, Stack size 24 bytes, tx_thread_system_suspend.o(.text._tx_thread_system_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_activate
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_analyze
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_priority_change
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_shell_entry
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_get
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_get
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_thread_entry
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_suspend
</UL>

<P><STRONG><a name="[db]"></a>_tx_thread_time_slice</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, tx_thread_time_slice.o(.text._tx_thread_time_slice))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _tx_thread_time_slice &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_analyze
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_interrupt
</UL>

<P><STRONG><a name="[c4]"></a>_tx_thread_timeout</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tx_thread_timeout.o(.text._tx_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _tx_thread_timeout &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_thread_create.o(.text._tx_thread_create)
</UL>
<P><STRONG><a name="[13e]"></a>_tx_time_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tx_time_get.o(.text._tx_time_get))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[20a]"></a>_tx_timer_create</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tx_timer_create.o(.text._tx_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_activate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fast_periodic_timer_create
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_create
</UL>

<P><STRONG><a name="[da]"></a>_tx_timer_expiration_process</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tx_timer_expiration_process.o(.text._tx_timer_expiration_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _tx_timer_expiration_process &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_interrupt
</UL>

<P><STRONG><a name="[266]"></a>_tx_timer_initialize</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, tx_timer_initialize.o(.text._tx_timer_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = _tx_timer_initialize &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_high_level
</UL>

<P><STRONG><a name="[279]"></a>_tx_timer_system_activate</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, tx_timer_system_activate.o(.text._tx_timer_system_activate))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_thread_entry
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_create
</UL>

<P><STRONG><a name="[278]"></a>_tx_timer_system_deactivate</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tx_timer_system_deactivate.o(.text._tx_timer_system_deactivate))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>

<P><STRONG><a name="[c6]"></a>_tx_timer_thread_entry</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, tx_timer_thread_entry.o(.text._tx_timer_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _tx_timer_thread_entry &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_activate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_timer_initialize.o(.text._tx_timer_initialize)
</UL>
<P><STRONG><a name="[f2]"></a>_txe_mutex_create</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, txe_mutex_create.o(.text._txe_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _txe_mutex_create &rArr; _tx_thread_system_preempt_check &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_create
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[f6]"></a>_txe_mutex_get</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, txe_mutex_get.o(.text._txe_mutex_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
</UL>

<P><STRONG><a name="[f8]"></a>_txe_mutex_put</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, txe_mutex_put.o(.text._txe_mutex_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _txe_mutex_put &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
</UL>

<P><STRONG><a name="[182]"></a>_txe_semaphore_create</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, txe_semaphore_create.o(.text._txe_semaphore_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _txe_semaphore_create &rArr; _tx_thread_system_preempt_check &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_create
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[18e]"></a>_txe_semaphore_get</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, txe_semaphore_get.o(.text._txe_semaphore_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[27a]"></a>_txe_semaphore_put</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, txe_semaphore_put.o(.text._txe_semaphore_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _txe_semaphore_put &rArr; _tx_semaphore_put &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_put
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_callback
</UL>

<P><STRONG><a name="[99]"></a>_txe_thread_create</STRONG> (Thumb, 320 bytes, Stack size 64 bytes, txe_thread_create.o(.text._txe_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text.tx_application_define)
<LI> main.o(.text.AppTaskStart)
</UL>
<P><STRONG><a name="[18b]"></a>_txe_thread_priority_change</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, txe_thread_priority_change.o(.text._txe_thread_priority_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _txe_thread_priority_change &rArr; _tx_thread_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_priority_change
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[117]"></a>bsp_DelayMS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_dwt.o(.text.bsp_DelayMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_DelayMS &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_InitHard
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_InitHard
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectLcdType
</UL>

<P><STRONG><a name="[a5]"></a>bsp_DelayUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_dwt.o(.text.bsp_DelayUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectLcdType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_ts_touch.o(.text.TOUCH_IntWakeUpForGT)
</UL>
<P><STRONG><a name="[1cb]"></a>bsp_DetectLcdType</STRONG> (Thumb, 536 bytes, Stack size 24 bytes, bsp_ts_touch.o(.text.bsp_DetectLcdType))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bsp_DetectLcdType &rArr; STMPE811_ReadIO &rArr; STMPE811_ReadGPIO &rArr; STMPE811_ReadReg1 &rArr; STMPE811_ReadBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadIO
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_InitHard
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadID
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadMaxXY
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadID
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
</UL>

<P><STRONG><a name="[f4]"></a>bsp_GetKey</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_key.o(.text.bsp_GetKey))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUserIF
</UL>

<P><STRONG><a name="[f0]"></a>bsp_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp.o(.text.bsp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = bsp_Init &rArr; bsp_InitUart &rArr; bsp_SetUartParam &rArr; HAL_UART_Init &rArr; OUTLINED_FUNCTION_0 &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitI2C
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSDRAM
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitTimer
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitDWT
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[27d]"></a>bsp_InitDWT</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp_dwt.o(.text.bsp_InitDWT))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[281]"></a>bsp_InitExtSDRAM</STRONG> (Thumb, 640 bytes, Stack size 328 bytes, bsp_fmc_sdram.o(.text.bsp_InitExtSDRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = bsp_InitExtSDRAM &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; OUTLINED_FUNCTION_8 &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[282]"></a>bsp_InitI2C</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, bsp_i2c_gpio.o(.text.bsp_InitI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = bsp_InitI2C &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[280]"></a>bsp_InitLed</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, bsp_led.o(.text.bsp_InitLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsp_InitLed
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[27e]"></a>bsp_InitTimer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_timer.o(.text.bsp_InitTimer))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[27f]"></a>bsp_InitUart</STRONG> (Thumb, 388 bytes, Stack size 248 bytes, bsp_uart_fifo.o(.text.bsp_InitUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = bsp_InitUart &rArr; bsp_SetUartParam &rArr; HAL_UART_Init &rArr; OUTLINED_FUNCTION_0 &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_InitTXE
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetUartParam
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[c8]"></a>bsp_LedOff</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bsp_led.o(.text.bsp_LedOff))
<BR><BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_led.o(.text.bsp_InitLed)
</UL>
<P><STRONG><a name="[ed]"></a>bsp_LedToggle</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bsp_led.o(.text.bsp_LedToggle))
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgPro
</UL>

<P><STRONG><a name="[1c0]"></a>bsp_RunPer10ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text.bsp_RunPer10ms))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>

<P><STRONG><a name="[1bf]"></a>bsp_RunPer1ms</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp.o(.text.bsp_RunPer1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bsp_RunPer1ms &rArr; TOUCH_CapScan &rArr; GT911_Scan &rArr; TOUCH_PutKey &rArr; TOUCH_TransY &rArr; OUTLINED_FUNCTION_1 &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_CapScan
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>

<P><STRONG><a name="[285]"></a>bsp_SetUartParam</STRONG> (Thumb, 72 bytes, Stack size 168 bytes, bsp_uart_fifo.o(.text.bsp_SetUartParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = bsp_SetUartParam &rArr; HAL_UART_Init &rArr; OUTLINED_FUNCTION_0 &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[289]"></a>comSendBuf</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, bsp_uart_fifo.o(.text.comSendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = comSendBuf &rArr; ComToUart
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComToUart
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comSendChar
</UL>

<P><STRONG><a name="[28a]"></a>comSendChar</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bsp_uart_fifo.o(.text.comSendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = comSendChar &rArr; comSendBuf &rArr; ComToUart
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comSendBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1cd]"></a>ee_ReadBytes</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, bsp_i2c_eeprom_24xx.o(.text.ee_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ee_ReadBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
</UL>

<P><STRONG><a name="[1d2]"></a>ee_WriteBytes</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, bsp_i2c_eeprom_24xx.o(.text.ee_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ee_WriteBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_SaveParam
</UL>

<P><STRONG><a name="[d0]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_uart_fifo.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fputc &rArr; comSendChar &rArr; comSendBuf &rArr; ComToUart
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comSendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[10c]"></a>i2c_Ack</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(.text.i2c_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadReg
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
</UL>

<P><STRONG><a name="[27b]"></a>i2c_CheckDevice</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_i2c_gpio.o(.text.i2c_CheckDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = i2c_CheckDevice &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectLcdType
</UL>

<P><STRONG><a name="[10d]"></a>i2c_NAck</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(.text.i2c_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadReg
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
</UL>

<P><STRONG><a name="[10b]"></a>i2c_ReadByte</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bsp_i2c_gpio.o(.text.i2c_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c_ReadByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadReg
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
</UL>

<P><STRONG><a name="[9f]"></a>i2c_SendByte</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bsp_i2c_gpio.o(.text.i2c_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_WriteBytes
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_WriteReg
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bsp_ts_gt911.o(.text.GT911_Scan)
<LI> bsp_ts_gt811.o(.text.GT811_WriteReg)
</UL>
<P><STRONG><a name="[10a]"></a>i2c_Start</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(.text.i2c_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadReg
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_WriteReg
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>

<P><STRONG><a name="[10e]"></a>i2c_Stop</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(.text.i2c_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitI2C
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_WriteBytes
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadReg
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_WriteReg
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>

<P><STRONG><a name="[a0]"></a>i2c_WaitAck</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(.text.i2c_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_WriteBytes
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_WriteReg
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bsp_ts_gt911.o(.text.GT911_Scan)
<LI> bsp_ts_gt811.o(.text.GT811_WriteReg)
</UL>
<P><STRONG><a name="[95]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = main &rArr; System_init &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SuspendTick
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a1]"></a>nx_driver_stm32h7xx</STRONG> (Thumb, 1484 bytes, Stack size 184 bytes, nx_stm32_eth_driver.o(.text.nx_driver_stm32h7xx))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = nx_driver_stm32h7xx &rArr; HAL_ETH_Init &rArr; HAL_ETH_MspInit &rArr; ETH_GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_release
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMACFilterConfig
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetDMAConfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMACConfig
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetMACConfig
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_BuildRxDescriptors
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetRxDataLength
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetRxDataBuffer
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Transmit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Stop
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start_IT
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_DescAssignMemory
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_identify
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_rarp_packet_deferred_receive
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_deferred_receive
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_deferred_receive
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_allocate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_transmit_release
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_GetLinkState
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_lan8720a_netx.o(.text.NetXTest)
</UL>
<P><STRONG><a name="[269]"></a>tx_application_define</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, main.o(.text.tx_application_define))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tx_application_define
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hardfaulthandler.o(OSKERNEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; HardFaultHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[292]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2b5]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[f7]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectLcdType
</UL>

<P><STRONG><a name="[2b6]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[2b7]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[294]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2b8]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[2b9]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[2ba]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[f5]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
</UL>

<P><STRONG><a name="[2bb]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2bc]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2bd]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1cf]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = puts &rArr; fputc &rArr; comSendChar &rArr; comSendBuf &rArr; ComToUart
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectLcdType
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[cd]"></a>AppTaskStart</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, main.o(.text.AppTaskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = AppTaskStart &rArr; bsp_Init &rArr; bsp_InitUart &rArr; bsp_SetUartParam &rArr; HAL_UART_Init &rArr; OUTLINED_FUNCTION_0 &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_create
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ResumeTick
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.tx_application_define)
</UL>
<P><STRONG><a name="[ce]"></a>AppTaskStat</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, main.o(.text.AppTaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AppTaskStat &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.tx_application_define)
</UL>
<P><STRONG><a name="[cf]"></a>AppTaskIDLE</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text.AppTaskIDLE))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.tx_application_define)
</UL>
<P><STRONG><a name="[f1]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[98]"></a>AppTaskMsgPro</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.AppTaskMsgPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + In Cycle
<LI>Call Chain = AppTaskMsgPro &rArr;  AppTaskMsgPro (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedToggle
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgPro
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgPro
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.AppTaskStart)
</UL>
<P><STRONG><a name="[9a]"></a>AppTaskUserIF</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, main.o(.text.AppTaskUserIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = AppTaskUserIF &rArr; App_Printf &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetKey
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.AppTaskStart)
</UL>
<P><STRONG><a name="[9b]"></a>AppTaskGUI</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.AppTaskGUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = AppTaskGUI &rArr; App_Printf &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.AppTaskStart)
</UL>
<P><STRONG><a name="[9c]"></a>AppTaskNetXPro</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text.AppTaskNetXPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = AppTaskNetXPro &rArr; NetXTest &rArr; _nxe_tcp_socket_disconnect &rArr; _nx_tcp_socket_disconnect &rArr; OUTLINED_FUNCTION_0 &rArr; _nx_tcp_packet_send_fin &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.AppTaskStart)
</UL>
<P><STRONG><a name="[9d]"></a>App_Printf</STRONG> (Thumb, 72 bytes, Stack size 240 bytes, main.o(.text.App_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = App_Printf &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_put
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_get
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskGUI
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUserIF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.AppTaskUserIF)
</UL>
<P><STRONG><a name="[a2]"></a>tcp_listen_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, demo_lan8720a_netx.o(.text.tcp_listen_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tcp_listen_callback &rArr; _txe_semaphore_put &rArr; _tx_semaphore_put &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_lan8720a_netx.o(.text.NetXTest)
</UL>
<P><STRONG><a name="[1c3]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[1c5]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[1c6]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[1c7]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[284]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_uart_fifo.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[286]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_uart_fifo.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[1dd]"></a>UartIRQ</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, bsp_uart_fifo.o(.text.UartIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UartIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1de]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_uart_fifo.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIRQ
</UL>

<P><STRONG><a name="[283]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_fmc_sdram.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSDRAM
</UL>

<P><STRONG><a name="[27c]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_ts_touch.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectLcdType
</UL>

<P><STRONG><a name="[1ce]"></a>TOUCH_SaveParam</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_ts_touch.o(.text.TOUCH_SaveParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TOUCH_SaveParam &rArr; ee_WriteBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
</UL>

<P><STRONG><a name="[1d0]"></a>TOUCH_TransX</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, bsp_ts_touch.o(.text.TOUCH_TransX))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TOUCH_TransX &rArr; OUTLINED_FUNCTION_1 &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTwoPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
</UL>

<P><STRONG><a name="[1d1]"></a>TOUCH_TransY</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, bsp_ts_touch.o(.text.TOUCH_TransY))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TOUCH_TransY &rArr; OUTLINED_FUNCTION_1 &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTwoPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
</UL>

<P><STRONG><a name="[1ad]"></a>CalTwoPoint</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_ts_touch.o(.text.CalTwoPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalTwoPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_TransY
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_TransX
</UL>

<P><STRONG><a name="[1ac]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_ts_touch.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTwoPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_TransY
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_TransX
</UL>

<P><STRONG><a name="[1d8]"></a>TOUCH_PressValid</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bsp_ts_touch.o(.text.TOUCH_PressValid))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[1d9]"></a>TOUCH_DataFilter</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bsp_ts_touch.o(.text.TOUCH_DataFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TOUCH_DataFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[109]"></a>FT5X06_ReadReg</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bsp_ts_ft5x06.o(.text.FT5X06_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FT5X06_ReadReg &rArr; i2c_ReadByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_Scan
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadID
</UL>

<P><STRONG><a name="[113]"></a>GT811_WriteReg</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bsp_ts_gt811.o(.text.GT811_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GT811_WriteReg &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_InitHard
</UL>

<P><STRONG><a name="[114]"></a>GT811_ReadReg</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, bsp_ts_gt811.o(.text.GT811_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GT811_ReadReg &rArr; i2c_ReadByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_Scan
</UL>

<P><STRONG><a name="[119]"></a>GT911_ReadReg</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, bsp_ts_gt911.o(.text.GT911_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GT911_ReadReg &rArr; i2c_ReadByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadMaxXY
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadID
</UL>

<P><STRONG><a name="[199]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_ts_stmpe811.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; i2c_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_WriteBytes
</UL>

<P><STRONG><a name="[28b]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_i2c_gpio.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>

<P><STRONG><a name="[28c]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_i2c_gpio.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>

<P><STRONG><a name="[cc]"></a>i2c_Delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_i2c_gpio.o(.text.i2c_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_i2c_gpio.o(.text.i2c_WaitAck)
</UL>
<P><STRONG><a name="[178]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SuspendTick
</UL>

<P><STRONG><a name="[16e]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ResumeTick
</UL>

<P><STRONG><a name="[176]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCFG_ETHInterfaceSelect
</UL>

<P><STRONG><a name="[13d]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnableCompensationCell
</UL>

<P><STRONG><a name="[16a]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[16c]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[16d]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[165]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[167]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[156]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_15 &rArr; RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[157]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[158]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[159]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[15a]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[15b]"></a>OUTLINED_FUNCTION_21</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_21))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[15c]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[15d]"></a>OUTLINED_FUNCTION_19</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_19))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[15e]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[15f]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[160]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_10 &rArr; RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[161]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[162]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[163]"></a>OUTLINED_FUNCTION_20</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_20))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1ae]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
</UL>

<P><STRONG><a name="[1af]"></a>OUTLINED_FUNCTION_18</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_18))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>

<P><STRONG><a name="[1b5]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>

<P><STRONG><a name="[1b4]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>

<P><STRONG><a name="[150]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[151]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[152]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[153]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[14f]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[14d]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
</UL>

<P><STRONG><a name="[107]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_ll_fmc.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
</UL>

<P><STRONG><a name="[17a]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[17b]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[17c]"></a>OUTLINED_FUNCTION_28</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_28))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_28 &rArr; UART_AdvFeatureConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[17d]"></a>OUTLINED_FUNCTION_27</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_27))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[17e]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1db]"></a>OUTLINED_FUNCTION_25</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_25))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1b0]"></a>OUTLINED_FUNCTION_22</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_22))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_22 &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[1dc]"></a>OUTLINED_FUNCTION_20</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_20))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[12c]"></a>ETH_SetMACConfig</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(.text.ETH_SetMACConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_SetMACConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMACConfig
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[12d]"></a>ETH_SetDMAConfig</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32h7xx_hal_eth.o(.text.ETH_SetDMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_SetDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetDMAConfig
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[136]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start_IT
</UL>

<P><STRONG><a name="[138]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Stop
</UL>

<P><STRONG><a name="[13a]"></a>ETH_Prepare_Tx_Descriptors</STRONG> (Thumb, 724 bytes, Stack size 52 bytes, stm32h7xx_hal_eth.o(.text.ETH_Prepare_Tx_Descriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Transmit
</UL>

<P><STRONG><a name="[145]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
</UL>

<P><STRONG><a name="[14b]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
</UL>

<P><STRONG><a name="[173]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_sdram.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[274]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tx_thread_system_resume.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>

<P><STRONG><a name="[275]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tx_thread_system_resume.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>

<P><STRONG><a name="[276]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tx_thread_system_resume.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>

<P><STRONG><a name="[277]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tx_thread_system_resume.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>

<P><STRONG><a name="[101]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lan8720a.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[102]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lan8720a.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[103]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lan8720a.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[104]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lan8720a.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[1e6]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nx_arp_packet_receive.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_receive
</UL>

<P><STRONG><a name="[1e7]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nx_arp_packet_receive.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_receive
</UL>

<P><STRONG><a name="[1f3]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nx_icmpv4_send_error_message.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
</UL>

<P><STRONG><a name="[19b]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nx_ip_dispatch_process.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_dispatch_process
</UL>

<P><STRONG><a name="[212]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nx_ip_driver_packet_send.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_packet_send
</UL>

<P><STRONG><a name="[213]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nx_ip_driver_packet_send.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_packet_send
</UL>

<P><STRONG><a name="[b0]"></a>_nx_ip_fast_periodic_timer_entry</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nx_ip_fast_periodic_timer_entry.o(.text._nx_ip_fast_periodic_timer_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _nx_ip_fast_periodic_timer_entry &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_ip_fast_periodic_timer_entry.o(.text._nx_ip_fast_periodic_timer_create)
</UL>
<P><STRONG><a name="[217]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nx_ip_fragment_packet.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_packet
</UL>

<P><STRONG><a name="[19d]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nx_ipv6_packet_send.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>

<P><STRONG><a name="[fa]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nx_ipv6_util.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_UNSPECIFIED_ADDRESS
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
</UL>

<P><STRONG><a name="[234]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nx_tcp_fast_periodic_processing.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_fast_periodic_processing
</UL>

<P><STRONG><a name="[19e]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nx_tcp_packet_process.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _nx_tcp_no_connection_reset &rArr; _nx_tcp_packet_send_rst &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_no_connection_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
</UL>

<P><STRONG><a name="[1a0]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nx_tcp_server_socket_relisten.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_relisten
</UL>

<P><STRONG><a name="[1a2]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nx_tcp_socket_disconnect.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _nx_tcp_packet_send_fin &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
</UL>

<P><STRONG><a name="[1a4]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nx_tcp_socket_packet_process.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _nx_tcp_socket_state_data_check &rArr; OUTLINED_FUNCTION_0 &rArr; _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_check
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[1a6]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nx_tcp_socket_receive.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_receive
</UL>

<P><STRONG><a name="[1a7]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nx_tcp_socket_send_internal.o(.text.OUTLINED_FUNCTION_0), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
</UL>

<P><STRONG><a name="[255]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nx_tcp_socket_send_internal.o(.text.OUTLINED_FUNCTION_1), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
</UL>

<P><STRONG><a name="[1a9]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nx_tcp_socket_state_data_check.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_check
</UL>

<P><STRONG><a name="[25b]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nx_udp_packet_receive.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_packet_receive
</UL>

<P><STRONG><a name="[1ab]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, nx_udp_packet_receive.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_packet_receive
</UL>

<P><STRONG><a name="[295]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[293]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[298]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[297]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d1]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
