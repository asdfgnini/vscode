<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\output.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\output.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Mon Aug 26 16:46:06 2024
<BR><P>
<H3>Maximum Stack Usage =        560 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
AppTaskStart &rArr; bsp_Init &rArr; bsp_InitUart &rArr; bsp_SetUartParam &rArr; HAL_UART_Init &rArr; OUTLINED_FUNCTION_3 &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[23b]">_tx_initialize_low_level</a>
 <LI><a href="#[105]">__tx_BadHandler</a>
 <LI><a href="#[106]">__tx_HardfaultHandler</a>
 <LI><a href="#[107]">__tx_SVCallHandler</a>
 <LI><a href="#[325]">__tx_IntHandler</a>
 <LI><a href="#[9]">SysTick_Handler</a>
 <LI><a href="#[326]">__tx_SysTickHandler</a>
 <LI><a href="#[109]">__tx_NMIHandler</a>
 <LI><a href="#[10a]">__tx_DBGHandler</a>
 <LI><a href="#[23d]">_tx_thread_schedule</a>
 <LI><a href="#[8]">PendSV_Handler</a>
 <LI><a href="#[327]">__tx_PendSVHandler</a>
 <LI><a href="#[328]">tx_thread_fpu_enable</a>
 <LI><a href="#[329]">tx_thread_fpu_disable</a>
 <LI><a href="#[249]">_tx_thread_stack_build</a>
 <LI><a href="#[108]">_tx_timer_interrupt</a>
 <LI><a href="#[2]">HardFault_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[81]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[81]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[278]">_ux_utility_memory_copy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[278]">_ux_utility_memory_copy</a><BR>
 <LI><a href="#[261]">_ux_utility_memory_set</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[261]">_ux_utility_memory_set</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[9b]">AppTaskMsgPro</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9b]">AppTaskMsgPro</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[81]">ADC3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[c8]">AppTaskIDLE</a> from main.o(.text.AppTaskIDLE) referenced from main.o(.text.tx_application_define)
 <LI><a href="#[9b]">AppTaskMsgPro</a> from main.o(.text.AppTaskMsgPro) referenced from main.o(.text.AppTaskStart)
 <LI><a href="#[c5]">AppTaskStart</a> from main.o(.text.AppTaskStart) referenced from main.o(.text.tx_application_define)
 <LI><a href="#[c7]">AppTaskStat</a> from main.o(.text.AppTaskStat) referenced from main.o(.text.tx_application_define)
 <LI><a href="#[9c]">AppTaskUserIF</a> from main.o(.text.AppTaskUserIF) referenced from main.o(.text.AppTaskStart)
 <LI><a href="#[9d]">App_Printf</a> from main.o(.text.App_Printf) referenced from main.o(.text.AppTaskUserIF)
 <LI><a href="#[83]">BDMA_Channel0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[84]">BDMA_Channel1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[85]">BDMA_Channel2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[86]">BDMA_Channel3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[87]">BDMA_Channel4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[88]">BDMA_Channel5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[89]">BDMA_Channel6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8a]">BDMA_Channel7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32h7xx_it.o(.text.BusFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[62]">CEC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8b]">COMP1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[91]">CRS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[53]">DCMI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[72]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[73]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[74]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[75]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5e]">DMA2D_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[41]">DMA2_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6a]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[82]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32h7xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[92]">ECC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[46]">ETH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[47]">ETH_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1d]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1f]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1e]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[20]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[48]">FDCAN_CAL_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[39]">FMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[55]">FPU_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[c3]">HAL_GPIO_Init</a> from stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init) referenced from bsp_uart_fifo.o(.text.bsp_InitUart)
 <LI><a href="#[a9]">HAL_MPU_ConfigRegion</a> from stm32h7xx_hal_cortex.o(.text.HAL_MPU_ConfigRegion) referenced from bsp.o(.text.System_init)
 <LI><a href="#[71]">HRTIM1_FLT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6b]">HRTIM1_Master_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6c]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6d]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6e]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6f]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[70]">HRTIM1_TIME_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[80]">HSEM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from hardfaulthandler.o(OSKERNEL) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4e]">I2C3_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4d]">I2C3_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[64]">I2C4_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[63]">I2C4_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7d]">JPEG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[61]">LPTIM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8c]">LPTIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8d]">LPTIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8e]">LPTIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8f]">LPTIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[90]">LPUART1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5d]">LTDC_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5c]">LTDC_IRQHandler</a> from bsp_tft_h7.o(.text.LTDC_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7c]">MDIOS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7b]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7e]">MDMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32h7xx_it.o(.text.MemManage_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32h7xx_it.o(.text.NMI_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[67]">OTG_FS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[66]">OTG_FS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[69]">OTG_FS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[68]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[50]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4f]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[52]">OTG_HS_IRQHandler</a> from stm32h7xx_it.o(.text.OTG_HS_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[51]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b]">PVD_AVD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from tx_thread_schedule.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[60]">QUADSPI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[54]">RNG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[c0]">RS485_ReciveNew</a> from bsp_uart_fifo.o(.text.RS485_ReciveNew) referenced from bsp_uart_fifo.o(.text.bsp_InitUart)
 <LI><a href="#[c2]">RS485_SendBefor</a> from bsp_uart_fifo.o(.text.RS485_SendBefor) referenced from bsp_uart_fifo.o(.text.bsp_InitUart)
 <LI><a href="#[c1]">RS485_SendOver</a> from bsp_uart_fifo.o(.text.RS485_SendOver) referenced from bsp_uart_fifo.o(.text.bsp_InitUart)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5b]">SAI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5f]">SAI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[76]">SAI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[93]">SAI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3a]">SDMMC1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7f]">SDMMC2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[65]">SPDIF_RX_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3c]">SPI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[58]">SPI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[59]">SPI5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5a]">SPI6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32h7xx_it.o(.text.SVC_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[77]">SWPMI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from tx_initialize_low_level.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[95]">SystemInit</a> from system_stm32h7xx.o(.text.SystemInit) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[78]">TIM15_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[79]">TIM16_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7a]">TIM17_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3b]">TIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3f]">TIM6_DAC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[40]">TIM7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[34]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[37]">TIM8_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[36]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[35]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3d]">UART4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3e]">UART5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[56]">UART7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[57]">UART8_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from bsp_uart_fifo.o(.text.USART1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from bsp_uart_fifo.o(.text.USART3_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4c]">USART6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32h7xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[94]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[c9]">__2printf</a> from __2printf.o(.text) referenced from app_usbx_host.o(.text.ux_host_event_callback)
 <LI><a href="#[96]">__main</a> from __main.o(!!!main) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[9a]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[98]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[97]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
 <LI><a href="#[ac]">_tx_byte_pool_cleanup</a> from tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup) referenced from tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup)
 <LI><a href="#[ae]">_tx_mutex_cleanup</a> from tx_mutex_cleanup.o(.text._tx_mutex_cleanup) referenced from tx_mutex_get.o(.text._tx_mutex_get)
 <LI><a href="#[ad]">_tx_mutex_thread_release</a> from tx_mutex_cleanup.o(.text._tx_mutex_thread_release) referenced from tx_mutex_create.o(.text._tx_mutex_create)
 <LI><a href="#[af]">_tx_semaphore_cleanup</a> from tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup) referenced from tx_semaphore_get.o(.text._tx_semaphore_get)
 <LI><a href="#[b1]">_tx_thread_shell_entry</a> from tx_thread_shell_entry.o(.text._tx_thread_shell_entry) referenced from tx_thread_create.o(.text._tx_thread_create)
 <LI><a href="#[b0]">_tx_thread_timeout</a> from tx_thread_timeout.o(.text._tx_thread_timeout) referenced from tx_thread_create.o(.text._tx_thread_create)
 <LI><a href="#[b2]">_tx_timer_thread_entry</a> from tx_timer_thread_entry.o(.text._tx_timer_thread_entry) referenced from tx_timer_initialize.o(.text._tx_timer_initialize)
 <LI><a href="#[c6]">_txe_thread_create</a> from txe_thread_create.o(.text._txe_thread_create) referenced from main.o(.text.tx_application_define)
 <LI><a href="#[b3]">_ux_hcd_stm32_entry</a> from ux_hcd_stm32_entry.o(.text._ux_hcd_stm32_entry) referenced from ux_hcd_stm32_initialize.o(.text._ux_hcd_stm32_initialize)
 <LI><a href="#[aa]">_ux_hcd_stm32_initialize</a> from ux_hcd_stm32_initialize.o(.text._ux_hcd_stm32_initialize) referenced from app_usbx_host.o(.text.USBX_APP_Host_Init)
 <LI><a href="#[a2]">_ux_host_class_hid_entry</a> from ux_host_class_hid_entry.o(.text._ux_host_class_hid_entry) referenced from app_usbx_host.o(.text.MX_USBX_Host_Init)
 <LI><a href="#[a2]">_ux_host_class_hid_entry</a> from ux_host_class_hid_entry.o(.text._ux_host_class_hid_entry) referenced from app_usbx_host.o(.text.ux_host_event_callback)
 <LI><a href="#[b6]">_ux_host_class_hid_keyboard_callback</a> from ux_host_class_hid_keyboard_callback.o(.text._ux_host_class_hid_keyboard_callback) referenced from ux_host_class_hid_keyboard_activate.o(.text._ux_host_class_hid_keyboard_activate)
 <LI><a href="#[a4]">_ux_host_class_hid_keyboard_entry</a> from ux_host_class_hid_keyboard_entry.o(.text._ux_host_class_hid_keyboard_entry) referenced from app_usbx_host.o(.text.MX_USBX_Host_Init)
 <LI><a href="#[a4]">_ux_host_class_hid_keyboard_entry</a> from ux_host_class_hid_keyboard_entry.o(.text._ux_host_class_hid_keyboard_entry) referenced from app_usbx_host.o(.text.ux_host_event_callback)
 <LI><a href="#[b7]">_ux_host_class_hid_keyboard_thread</a> from ux_host_class_hid_keyboard_thread.o(.text._ux_host_class_hid_keyboard_thread) referenced from ux_host_class_hid_keyboard_activate.o(.text._ux_host_class_hid_keyboard_activate)
 <LI><a href="#[b9]">_ux_host_class_hid_mouse_callback</a> from ux_host_class_hid_mouse_callback.o(.text._ux_host_class_hid_mouse_callback) referenced from ux_host_class_hid_mouse_activate.o(.text._ux_host_class_hid_mouse_activate)
 <LI><a href="#[a3]">_ux_host_class_hid_mouse_entry</a> from ux_host_class_hid_mouse_entry.o(.text._ux_host_class_hid_mouse_entry) referenced from app_usbx_host.o(.text.MX_USBX_Host_Init)
 <LI><a href="#[a3]">_ux_host_class_hid_mouse_entry</a> from ux_host_class_hid_mouse_entry.o(.text._ux_host_class_hid_mouse_entry) referenced from app_usbx_host.o(.text.ux_host_event_callback)
 <LI><a href="#[b5]">_ux_host_class_hid_transfer_request_completed</a> from ux_host_class_hid_transfer_request_completed.o(.text._ux_host_class_hid_transfer_request_completed) referenced from ux_host_class_hid_interrupt_endpoint_search.o(.text._ux_host_class_hid_interrupt_endpoint_search)
 <LI><a href="#[ba]">_ux_host_class_hub_change_detect</a> from ux_host_class_hub_change_detect.o(.text._ux_host_class_hub_change_detect) referenced from ux_host_class_hub_activate.o(.text._ux_host_class_hub_activate)
 <LI><a href="#[a5]">_ux_host_class_hub_entry</a> from ux_host_class_hub_entry.o(.text._ux_host_class_hub_entry) referenced from app_usbx_host.o(.text.MX_USBX_Host_Init)
 <LI><a href="#[a5]">_ux_host_class_hub_entry</a> from ux_host_class_hub_entry.o(.text._ux_host_class_hub_entry) referenced from app_usbx_host.o(.text.ux_host_event_callback)
 <LI><a href="#[bc]">_ux_host_class_hub_feature</a> from ux_host_class_hub_feature.o(.text._ux_host_class_hub_feature) referenced from ux_host_class_hub_port_change_connection_process.o(.text._ux_host_class_hub_port_change_connection_process)
 <LI><a href="#[bb]">_ux_host_class_hub_transfer_request_completed</a> from ux_host_class_hub_transfer_request_completed.o(.text._ux_host_class_hub_transfer_request_completed) referenced from ux_host_class_hub_interrupt_endpoint_start.o(.text._ux_host_class_hub_interrupt_endpoint_start)
 <LI><a href="#[bd]">_ux_host_stack_enum_thread_entry</a> from ux_host_stack_enum_thread_entry.o(.text._ux_host_stack_enum_thread_entry) referenced from ux_host_stack_initialize.o(.text._ux_host_stack_initialize)
 <LI><a href="#[be]">_ux_host_stack_hcd_thread_entry</a> from ux_host_stack_hcd_thread_entry.o(.text._ux_host_stack_hcd_thread_entry) referenced from ux_host_stack_initialize.o(.text._ux_host_stack_initialize)
 <LI><a href="#[b8]">_ux_utility_memory_free</a> from ux_utility_memory_free.o(.text._ux_utility_memory_free) referenced from ux_host_class_hid_keyboard_deactivate.o(.text._ux_host_class_hid_keyboard_deactivate)
 <LI><a href="#[b4]">_ux_utility_short_put</a> from ux_utility_short_put.o(.text._ux_utility_short_put) referenced from ux_hcd_stm32_request_control_transfer.o(.text._ux_hcd_stm32_request_control_transfer)
 <LI><a href="#[a6]">app_ux_host_thread_entry</a> from app_usbx_host.o(.text.app_ux_host_thread_entry) referenced from app_usbx_host.o(.text.MX_USBX_Host_Init)
 <LI><a href="#[bf]">bsp_LedOff</a> from bsp_led.o(.text.bsp_LedOff) referenced from bsp_led.o(.text.bsp_InitLed)
 <LI><a href="#[99]">fputc</a> from bsp_uart_fifo.o(.text.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[a8]">hid_keyboard_thread_entry</a> from ux_host_keyboard.o(.text.hid_keyboard_thread_entry) referenced from app_usbx_host.o(.text.MX_USBX_Host_Init)
 <LI><a href="#[a7]">hid_mouse_thread_entry</a> from ux_host_mouse.o(.text.hid_mouse_thread_entry) referenced from app_usbx_host.o(.text.MX_USBX_Host_Init)
 <LI><a href="#[c4]">i2c_Delay</a> from bsp_i2c_gpio.o(.text.i2c_Delay) referenced from bsp_i2c_gpio.o(.text.i2c_WaitAck)
 <LI><a href="#[9e]">i2c_SendByte</a> from bsp_i2c_gpio.o(.text.i2c_SendByte) referenced from bsp_ts_gt911.o(.text.GT911_ReadReg)
 <LI><a href="#[9e]">i2c_SendByte</a> from bsp_i2c_gpio.o(.text.i2c_SendByte) referenced from bsp_ts_gt911.o(.text.GT911_Scan)
 <LI><a href="#[9f]">i2c_WaitAck</a> from bsp_i2c_gpio.o(.text.i2c_WaitAck) referenced from bsp_ts_gt911.o(.text.GT911_ReadReg)
 <LI><a href="#[9f]">i2c_WaitAck</a> from bsp_i2c_gpio.o(.text.i2c_WaitAck) referenced from bsp_ts_gt911.o(.text.GT911_Scan)
 <LI><a href="#[ab]">putchar</a> from putchar.o(.text) referenced from app_usbx_host.o(.text.USBX_APP_Host_Init)
 <LI><a href="#[ab]">putchar</a> from putchar.o(.text) referenced from app_usbx_host.o(.text.ux_host_event_callback)
 <LI><a href="#[a1]">ux_host_error_callback</a> from app_usbx_host.o(.text.ux_host_error_callback) referenced from app_usbx_host.o(.text.MX_USBX_Host_Init)
 <LI><a href="#[a0]">ux_host_event_callback</a> from app_usbx_host.o(.text.ux_host_event_callback) referenced from app_usbx_host.o(.text.MX_USBX_Host_Init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[96]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[ca]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[cc]"></a>__scatterload_rt2</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2fb]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2fc]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2fd]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[2fe]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[2ff]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[300]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[cd]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[119]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[cf]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[d1]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[d3]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[d4]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[d5]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[301]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[d7]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d9]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[da]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[db]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[dd]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[df]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[e1]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[e2]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[e3]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[e5]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[302]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[e7]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[e9]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[eb]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[ed]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[303]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[fd]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[ef]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[f1]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit3.o(.ARM.Collect$$libinit$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[304]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[305]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[306]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[307]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[308]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[309]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[30a]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[30b]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[30c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[30d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[30e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[30f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[310]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[311]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[312]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000026))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[313]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[314]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[315]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[316]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[317]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[318]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[102]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[319]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[fa]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[31a]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[31b]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[31c]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[31d]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[31e]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[31f]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[cb]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[320]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[321]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry5.o(.ARM.Collect$$rtentry$$00000005))

<P><STRONG><a name="[fc]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[322]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[fe]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; System_init &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[323]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[13d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[101]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[324]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[103]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_FS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_FS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[23b]"></a>_tx_initialize_low_level</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[105]"></a>__tx_BadHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_BadHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_BadHandler
</UL>

<P><STRONG><a name="[106]"></a>__tx_HardfaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_HardfaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_HardfaultHandler
</UL>

<P><STRONG><a name="[107]"></a>__tx_SVCallHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_SVCallHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_SVCallHandler
</UL>

<P><STRONG><a name="[325]"></a>__tx_IntHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; _tx_timer_interrupt &rArr; _tx_timer_expiration_process &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[326]"></a>__tx_SysTickHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__tx_NMIHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_NMIHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_NMIHandler
</UL>

<P><STRONG><a name="[10a]"></a>__tx_DBGHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_DBGHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_DBGHandler
</UL>

<P><STRONG><a name="[23d]"></a>_tx_thread_schedule</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[327]"></a>__tx_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>tx_thread_fpu_enable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text), UNUSED)

<P><STRONG><a name="[329]"></a>tx_thread_fpu_disable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>_tx_thread_stack_build</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_stack_build.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
</UL>

<P><STRONG><a name="[108]"></a>_tx_timer_interrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_timer_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = _tx_timer_interrupt &rArr; _tx_timer_expiration_process &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_expiration_process
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_time_slice
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[228]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[32a]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>vsnprintf</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
</UL>

<P><STRONG><a name="[c9]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBX_APP_Host_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_mouse_thread_entry
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux_host_error_callback
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux_host_event_callback
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbx_host.o(.text.ux_host_event_callback)
</UL>
<P><STRONG><a name="[110]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[d8]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[116]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[de]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[e6]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[d0]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[117]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[ab]"></a>putchar</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, putchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = putchar &rArr; fputc &rArr; comSendChar &rArr; comSendBuf &rArr; ComToUart
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_keyboard_thread_entry
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux_host_error_callback
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 2]<UL><LI> app_usbx_host.o(.text.USBX_APP_Host_Init)
<LI> app_usbx_host.o(.text.ux_host_event_callback)
</UL>
<P><STRONG><a name="[11a]"></a>puts</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = puts &rArr; fputc &rArr; comSendChar &rArr; comSendBuf &rArr; ComToUart
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBX_APP_Host_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux_host_event_callback
</UL>

<P><STRONG><a name="[140]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetUartParam
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_initialize
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_initialize
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_create
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_create
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_create
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[19d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
</UL>

<P><STRONG><a name="[32b]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[111]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[112]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[113]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[114]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[115]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ce]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[10e]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[97]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[11d]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[e8]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[ea]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[10f]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[11f]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[e0]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[122]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[dc]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[e4]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[32c]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[32d]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[121]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[129]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[12c]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[12d]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[ec]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[ee]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[11e]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[f9]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[fb]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[134]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[120]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[135]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[f4]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[133]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[12b]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[125]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[131]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[12f]"></a>freopen</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[139]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[132]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[32e]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[130]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[137]"></a>_sys_open</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_open &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[13c]"></a>_sys_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[14e]"></a>_sys_write</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[32f]"></a>_sys_read</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>_sys_istty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[14d]"></a>_sys_seek</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[330]"></a>_sys_ensure</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>_sys_flen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[136]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[331]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[332]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[333]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[334]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[144]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[f2]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_escrow
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[13a]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[138]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[335]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[14c]"></a>_writebuf</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[13b]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[14f]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[13f]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[13e]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[2fa]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7m_pel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[104]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[336]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[337]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>__Heap_Initialize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[338]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[339]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[33a]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[149]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[33b]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[145]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[146]"></a>__rt_heap_escrow</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, heapauxa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[142]"></a>__rt_heap_expand</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, heapauxa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __rt_heap_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[152]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[33c]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[33d]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[15e]"></a>ComToUart</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_uart_fifo.o(.text.ComToUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ComToUart
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comSendBuf
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[15f]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComToUart
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetUartParam
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_OTG_HS_HCD_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
</UL>

<P><STRONG><a name="[166]"></a>FT5X06_Scan</STRONG> (Thumb, 308 bytes, Stack size 64 bytes, bsp_ts_ft5x06.o(.text.FT5X06_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FT5X06_Scan &rArr; TOUCH_PutKey &rArr; TOUCH_TransY &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PenInt
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_CapScan
</UL>

<P><STRONG><a name="[21c]"></a>FT5X06_Timer1ms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_ts_ft5x06.o(.text.FT5X06_Timer1ms))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[16a]"></a>GT811_Scan</STRONG> (Thumb, 328 bytes, Stack size 64 bytes, bsp_ts_gt811.o(.text.GT811_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GT811_Scan &rArr; TOUCH_PutKey &rArr; TOUCH_TransY &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_CapScan
</UL>

<P><STRONG><a name="[21a]"></a>GT811_Timer1ms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_ts_gt811.o(.text.GT811_Timer1ms))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[16c]"></a>GT911_Scan</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, bsp_ts_gt911.o(.text.GT911_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GT911_Scan &rArr; TOUCH_PutKey &rArr; TOUCH_TransY &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadReg
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_CapScan
</UL>

<P><STRONG><a name="[21b]"></a>GT911_Timer1ms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_ts_gt911.o(.text.GT911_Timer1ms))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[16d]"></a>HAL_Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_timebase_tim.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Delay &rArr; bsp_DelayMS &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetPort
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
</UL>

<P><STRONG><a name="[16f]"></a>HAL_EnableCompensationCell</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_EnableCompensationCell))
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[c3]"></a>HAL_GPIO_Init</STRONG> (Thumb, 392 bytes, Stack size 56 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_InitTXE
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitKey
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart_fifo.o(.text.bsp_InitUart)
</UL>
<P><STRONG><a name="[2ef]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedToggle
</UL>

<P><STRONG><a name="[2ee]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOff
</UL>

<P><STRONG><a name="[1d4]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[171]"></a>HAL_GetTick</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32h7xx_hal_timebase_tim.o(.text.HAL_GetTick))
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[173]"></a>HAL_HCD_Connect_Callback</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ux_hcd_stm32_callback.o(.text.HAL_HCD_Connect_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_HCD_Connect_Callback &rArr; _ux_utility_semaphore_put &rArr; _txe_semaphore_put &rArr; _tx_semaphore_put &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_put
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[175]"></a>HAL_HCD_Disconnect_Callback</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ux_hcd_stm32_callback.o(.text.HAL_HCD_Disconnect_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_HCD_Disconnect_Callback &rArr; _ux_utility_semaphore_put &rArr; _txe_semaphore_put &rArr; _tx_semaphore_put &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_put
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[176]"></a>HAL_HCD_GetCurrentFrame</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_hcd.o(.text.HAL_HCD_GetCurrentFrame))
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetCurrentFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_frame_number_get
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_periodic_schedule
</UL>

<P><STRONG><a name="[178]"></a>HAL_HCD_GetCurrentSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_hcd.o(.text.HAL_HCD_GetCurrentSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_HCD_GetCurrentSpeed &rArr; USB_GetHostSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetHostSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_port_status_get
</UL>

<P><STRONG><a name="[1f7]"></a>HAL_HCD_HC_GetXferCount</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_hcd.o(.text.HAL_HCD_HC_GetXferCount))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[17a]"></a>HAL_HCD_HC_Halt</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32h7xx_hal_hcd.o(.text.HAL_HCD_HC_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_transfer_abort
</UL>

<P><STRONG><a name="[17e]"></a>HAL_HCD_HC_Init</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, stm32h7xx_hal_hcd.o(.text.HAL_HCD_HC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_HCD_HC_Init &rArr; USB_HC_Init &rArr; USB_GetHostSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_control_transfer
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_endpoint_create
</UL>

<P><STRONG><a name="[180]"></a>HAL_HCD_HC_NotifyURBChange_Callback</STRONG> (Thumb, 446 bytes, Stack size 40 bytes, ux_hcd_stm32_callback.o(.text.HAL_HCD_HC_NotifyURBChange_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = HAL_HCD_HC_NotifyURBChange_Callback &rArr; _ux_hcd_stm32_request_trans_prepare &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_SubmitRequest
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_put
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_trans_prepare
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_trans_finish
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[182]"></a>HAL_HCD_HC_SubmitRequest</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, stm32h7xx_hal_hcd.o(.text.HAL_HCD_HC_SubmitRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_control_transfer
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_bulk_transfer
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_periodic_schedule
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_NotifyURBChange_Callback
</UL>

<P><STRONG><a name="[186]"></a>HAL_HCD_IRQHandler</STRONG> (Thumb, 1734 bytes, Stack size 56 bytes, stm32h7xx_hal_hcd.o(.text.HAL_HCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = HAL_HCD_IRQHandler &rArr; HAL_HCD_HC_NotifyURBChange_Callback &rArr; _ux_hcd_stm32_request_trans_prepare &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadChInterrupts
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_ReadInterrupt
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_PortEnabled_Callback
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_PortDisabled_Callback
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitFSLSPClkSel
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_SOF_Callback
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_NotifyURBChange_Callback
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Disconnect_Callback
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Connect_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_IRQHandler
</UL>

<P><STRONG><a name="[197]"></a>HAL_HCD_Init</STRONG> (Thumb, 198 bytes, Stack size 80 bytes, stm32h7xx_hal_hcd.o(.text.HAL_HCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; OUTLINED_FUNCTION_8 &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_OTG_HS_HCD_Init
</UL>

<P><STRONG><a name="[198]"></a>HAL_HCD_MspInit</STRONG> (Thumb, 172 bytes, Stack size 240 bytes, usb_otg.o(.text.HAL_HCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = HAL_HCD_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; OUTLINED_FUNCTION_8 &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableUSBVoltageDetector
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[18c]"></a>HAL_HCD_PortDisabled_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_hcd.o(.text.HAL_HCD_PortDisabled_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[18d]"></a>HAL_HCD_PortEnabled_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_hcd.o(.text.HAL_HCD_PortEnabled_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_HCD_ResetPort</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_hcd.o(.text.HAL_HCD_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_HCD_ResetPort &rArr; USB_ResetPort &rArr; HAL_Delay &rArr; bsp_DelayMS &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_port_reset
</UL>

<P><STRONG><a name="[18e]"></a>HAL_HCD_SOF_Callback</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ux_hcd_stm32_callback.o(.text.HAL_HCD_SOF_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_HCD_SOF_Callback &rArr; _ux_utility_semaphore_put &rArr; _txe_semaphore_put &rArr; _tx_semaphore_put &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_put
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_HCD_Start</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32h7xx_hal_hcd.o(.text.HAL_HCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_HCD_Start &rArr; USB_DriveVbus
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DriveVbus
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBX_APP_Host_Init
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32h7xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Init &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[1aa]"></a>HAL_InitTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_timebase_tim.o(.text.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1ae]"></a>HAL_LTDC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[1ac]"></a>HAL_LTDC_IRQHandler</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_LTDC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ReloadEventCallback
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ErrorCallback
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_IRQHandler
</UL>

<P><STRONG><a name="[1af]"></a>HAL_LTDC_LineEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_LineEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_LTDC_ReloadEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_ReloadEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_ConfigRegion))
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.text.System_init)
</UL>
<P><STRONG><a name="[210]"></a>HAL_MPU_Disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[212]"></a>HAL_MPU_Enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
</UL>

<P><STRONG><a name="[1a8]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1b1]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32h7xx_hal_pwr_ex.o(.text.HAL_PWREx_ConfigSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_ConfigSupply
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[19f]"></a>HAL_PWREx_EnableUSBVoltageDetector</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableUSBVoltageDetector))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
</UL>

<P><STRONG><a name="[1b4]"></a>HAL_RCCEx_GetD3PCLK1Freq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetD3PCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1b7]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[19e]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 2004 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; OUTLINED_FUNCTION_8 &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_20
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
</UL>

<P><STRONG><a name="[1cc]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 516 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[1b5]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[1ce]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1d0]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1a9]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[1d1]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1220 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[156]"></a>HAL_ResumeTick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_ResumeTick))
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[1d7]"></a>HAL_SuspendTick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_SuspendTick))
<BR><BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; OUTLINED_FUNCTION_3 &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_42
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_45
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetUartParam
</UL>

<P><STRONG><a name="[1fe]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
</UL>

<P><STRONG><a name="[2f9]"></a>HardFaultHandler</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, segger_hardfaulthandler.o(.text.HardFaultHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardFaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[5c]"></a>LTDC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_tft_h7.o(.text.LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LTDC_IRQHandler &rArr; HAL_LTDC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[158]"></a>MX_USBX_Host_Init</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, app_usbx_host.o(.text.MX_USBX_Host_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = MX_USBX_Host_Init &rArr; _ux_host_stack_initialize &rArr; _ux_utility_thread_create &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_client_register
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_register
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_error_callback_register
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_initialize
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_initialize
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_allocate
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_pool_create
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[1eb]"></a>MX_USB_OTG_HS_HCD_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_otg.o(.text.MX_USB_OTG_HS_HCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = MX_USB_OTG_HS_HCD_Init &rArr; HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; OUTLINED_FUNCTION_8 &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBX_APP_Host_Init
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.OTG_HS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = OTG_HS_IRQHandler &rArr; HAL_HCD_IRQHandler &rArr; HAL_HCD_HC_NotifyURBChange_Callback &rArr; _ux_hcd_stm32_request_trans_prepare &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[206]"></a>RS485_InitTXE</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, bsp_uart_fifo.o(.text.RS485_InitTXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RS485_InitTXE &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[c0]"></a>RS485_ReciveNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_uart_fifo.o(.text.RS485_ReciveNew))
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart_fifo.o(.text.bsp_InitUart)
</UL>
<P><STRONG><a name="[c2]"></a>RS485_SendBefor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_uart_fifo.o(.text.RS485_SendBefor))
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart_fifo.o(.text.bsp_InitUart)
</UL>
<P><STRONG><a name="[c1]"></a>RS485_SendOver</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_uart_fifo.o(.text.RS485_SendOver))
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart_fifo.o(.text.bsp_InitUart)
</UL>
<P><STRONG><a name="[207]"></a>STMPE811_ClearInt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_ts_stmpe811.o(.text.STMPE811_ClearInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STMPE811_ClearInt &rArr; STMPE811_WriteReg1 &rArr; STMPE811_WriteBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_WriteReg1
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[209]"></a>STMPE811_ReadBytes</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bsp_ts_stmpe811.o(.text.STMPE811_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = STMPE811_ReadBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadReg1
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadX
</UL>

<P><STRONG><a name="[20a]"></a>STMPE811_ReadReg1</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bsp_ts_stmpe811.o(.text.STMPE811_ReadReg1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STMPE811_ReadReg1 &rArr; STMPE811_ReadBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadX
</UL>

<P><STRONG><a name="[20b]"></a>STMPE811_ReadX</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bsp_ts_stmpe811.o(.text.STMPE811_ReadX))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = STMPE811_ReadX &rArr; STMPE811_ReadReg1 &rArr; STMPE811_ReadBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadReg1
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[21d]"></a>STMPE811_ReadY</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_ts_stmpe811.o(.text.STMPE811_ReadY))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[20c]"></a>STMPE811_WriteBytes</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bsp_ts_stmpe811.o(.text.STMPE811_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = STMPE811_WriteBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_WriteReg1
</UL>

<P><STRONG><a name="[208]"></a>STMPE811_WriteReg1</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bsp_ts_stmpe811.o(.text.STMPE811_WriteReg1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STMPE811_WriteReg1 &rArr; STMPE811_WriteBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ClearInt
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[15a]"></a>SysTick_ISR</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, bsp_timer.o(.text.SysTick_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SysTick_ISR &rArr; bsp_RunPer1ms &rArr; TOUCH_CapScan &rArr; GT911_Scan &rArr; TOUCH_PutKey &rArr; TOUCH_TransY &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer1ms
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer10ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[95]"></a>SystemInit</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, system_stm32h7xx.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[20f]"></a>System_init</STRONG> (Thumb, 580 bytes, Stack size 136 bytes, bsp.o(.text.System_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = System_init &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnableCompensationCell
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[216]"></a>TOUCH_CapScan</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bsp_ts_touch.o(.text.TOUCH_CapScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TOUCH_CapScan &rArr; GT911_Scan &rArr; TOUCH_PutKey &rArr; TOUCH_TransY &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_Scan
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer1ms
</UL>

<P><STRONG><a name="[220]"></a>TOUCH_MoveValid</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, bsp_ts_touch.o(.text.TOUCH_MoveValid))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[167]"></a>TOUCH_PenInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_ts_touch.o(.text.TOUCH_PenInt))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_Scan
</UL>

<P><STRONG><a name="[168]"></a>TOUCH_PutKey</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, bsp_ts_touch.o(.text.TOUCH_PutKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TOUCH_PutKey &rArr; TOUCH_TransY &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_TransY
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_TransX
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_Scan
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_Scan
</UL>

<P><STRONG><a name="[219]"></a>TOUCH_Scan</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, bsp_ts_touch.o(.text.TOUCH_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TOUCH_Scan &rArr; STMPE811_ReadX &rArr; STMPE811_ReadReg1 &rArr; STMPE811_ReadBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ClearInt
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadY
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadX
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_Timer1ms
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Timer1ms
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_Timer1ms
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_MoveValid
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_DataFilter
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PressValid
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer1ms
</UL>

<P><STRONG><a name="[204]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_45
</UL>

<P><STRONG><a name="[1df]"></a>UART_CheckIdleState</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_CheckIdleState &rArr; OUTLINED_FUNCTION_34 &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_41
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_34
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[201]"></a>UART_SetConfig</STRONG> (Thumb, 600 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_38
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[203]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_34
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_uart_fifo.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_IRQHandler &rArr; UartIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_uart_fifo.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_IRQHandler &rArr; UartIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[22a]"></a>USBX_APP_Host_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, app_usbx_host.o(.text.USBX_APP_Host_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = USBX_APP_Host_Init &rArr; MX_USB_OTG_HS_HCD_Init &rArr; HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; OUTLINED_FUNCTION_8 &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Start
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_hcd_register
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_OTG_HS_HCD_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ux_host_thread_entry
</UL>

<P><STRONG><a name="[19a]"></a>USB_CoreInit</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32h7xx_ll_usb.o(.text.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_CoreInit &rArr; USB_CoreReset
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[199]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(.text.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[230]"></a>USB_DoPing</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(.text.USB_DoPing))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_StartXfer
</UL>

<P><STRONG><a name="[1a5]"></a>USB_DriveVbus</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, stm32h7xx_ll_usb.o(.text.USB_DriveVbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_DriveVbus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Start
</UL>

<P><STRONG><a name="[1a6]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(.text.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Start
</UL>

<P><STRONG><a name="[18a]"></a>USB_FlushRxFifo</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, stm32h7xx_ll_usb.o(.text.USB_FlushRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
</UL>

<P><STRONG><a name="[189]"></a>USB_FlushTxFifo</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, stm32h7xx_ll_usb.o(.text.USB_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
</UL>

<P><STRONG><a name="[177]"></a>USB_GetCurrentFrame</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(.text.USB_GetCurrentFrame))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentFrame
</UL>

<P><STRONG><a name="[179]"></a>USB_GetHostSpeed</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32h7xx_ll_usb.o(.text.USB_GetHostSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_GetHostSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentSpeed
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Init
</UL>

<P><STRONG><a name="[187]"></a>USB_GetMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(.text.USB_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[17c]"></a>USB_HC_Halt</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, stm32h7xx_ll_usb.o(.text.USB_HC_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Halt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[17f]"></a>USB_HC_Init</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, stm32h7xx_ll_usb.o(.text.USB_HC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_HC_Init &rArr; USB_GetHostSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetHostSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Init
</UL>

<P><STRONG><a name="[190]"></a>USB_HC_ReadInterrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(.text.USB_HC_ReadInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[185]"></a>USB_HC_StartXfer</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, stm32h7xx_ll_usb.o(.text.USB_HC_StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_SubmitRequest
</UL>

<P><STRONG><a name="[19c]"></a>USB_HostInit</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32h7xx_ll_usb.o(.text.USB_HostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_HostInit &rArr; USB_FlushRxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[18b]"></a>USB_InitFSLSPClkSel</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(.text.USB_InitFSLSPClkSel))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[191]"></a>USB_ReadChInterrupts</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(.text.USB_ReadChInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[188]"></a>USB_ReadInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(.text.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[18f]"></a>USB_ReadPacket</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32h7xx_ll_usb.o(.text.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[1a3]"></a>USB_ResetPort</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32h7xx_ll_usb.o(.text.USB_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_ResetPort &rArr; HAL_Delay &rArr; bsp_DelayMS &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_ResetPort
</UL>

<P><STRONG><a name="[19b]"></a>USB_SetCurrentMode</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32h7xx_ll_usb.o(.text.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay &rArr; bsp_DelayMS &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[22f]"></a>USB_WritePacket</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32h7xx_ll_usb.o(.text.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_StartXfer
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[232]"></a>_tx_byte_allocate</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, tx_byte_allocate.o(.text._tx_byte_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _tx_byte_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_search
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_allocate
</UL>

<P><STRONG><a name="[ac]"></a>_tx_byte_pool_cleanup</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _tx_byte_pool_cleanup &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup)
</UL>
<P><STRONG><a name="[236]"></a>_tx_byte_pool_create</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tx_byte_pool_create.o(.text._tx_byte_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _tx_byte_pool_create
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_pool_create
</UL>

<P><STRONG><a name="[233]"></a>_tx_byte_pool_search</STRONG> (Thumb, 224 bytes, Stack size 28 bytes, tx_byte_pool_search.o(.text._tx_byte_pool_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _tx_byte_pool_search
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_allocate
</UL>

<P><STRONG><a name="[237]"></a>_tx_initialize_high_level</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tx_initialize_high_level.o(.text._tx_initialize_high_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = _tx_initialize_high_level &rArr; _tx_timer_initialize &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_initialize
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[23a]"></a>_tx_initialize_kernel_enter</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tx_initialize_kernel_enter.o(.text._tx_initialize_kernel_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = _tx_initialize_kernel_enter &rArr; _tx_initialize_high_level &rArr; _tx_timer_initialize &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_application_define
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_high_level
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_schedule
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_low_level
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>_tx_mutex_cleanup</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, tx_mutex_cleanup.o(.text._tx_mutex_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _tx_mutex_cleanup &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_mutex_get.o(.text._tx_mutex_get)
</UL>
<P><STRONG><a name="[23e]"></a>_tx_mutex_create</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tx_mutex_create.o(.text._tx_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _tx_mutex_create
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_create
</UL>

<P><STRONG><a name="[23f]"></a>_tx_mutex_get</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, tx_mutex_get.o(.text._tx_mutex_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_get
</UL>

<P><STRONG><a name="[241]"></a>_tx_mutex_prioritize</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, tx_mutex_prioritize.o(.text._tx_mutex_prioritize))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _tx_mutex_prioritize &rArr; _tx_thread_system_preempt_check &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>

<P><STRONG><a name="[240]"></a>_tx_mutex_priority_change</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, tx_mutex_priority_change.o(.text._tx_mutex_priority_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>

<P><STRONG><a name="[243]"></a>_tx_mutex_put</STRONG> (Thumb, 472 bytes, Stack size 24 bytes, tx_mutex_put.o(.text._tx_mutex_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_prioritize
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_put
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_thread_release
</UL>

<P><STRONG><a name="[ad]"></a>_tx_mutex_thread_release</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tx_mutex_cleanup.o(.text._tx_mutex_thread_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _tx_mutex_thread_release &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_mutex_create.o(.text._tx_mutex_create)
</UL>
<P><STRONG><a name="[af]"></a>_tx_semaphore_cleanup</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _tx_semaphore_cleanup &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_semaphore_get.o(.text._tx_semaphore_get)
</UL>
<P><STRONG><a name="[244]"></a>_tx_semaphore_create</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tx_semaphore_create.o(.text._tx_semaphore_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _tx_semaphore_create
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_create
</UL>

<P><STRONG><a name="[245]"></a>_tx_semaphore_delete</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, tx_semaphore_delete.o(.text._tx_semaphore_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _tx_semaphore_delete &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_delete
</UL>

<P><STRONG><a name="[246]"></a>_tx_semaphore_get</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, tx_semaphore_get.o(.text._tx_semaphore_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_get
</UL>

<P><STRONG><a name="[247]"></a>_tx_semaphore_put</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tx_semaphore_put.o(.text._tx_semaphore_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _tx_semaphore_put &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_put
</UL>

<P><STRONG><a name="[248]"></a>_tx_thread_create</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, tx_thread_create.o(.text._tx_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_build
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_initialize
</UL>

<P><STRONG><a name="[25a]"></a>_tx_thread_delete</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tx_thread_delete.o(.text._tx_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tx_thread_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_delete
</UL>

<P><STRONG><a name="[2e2]"></a>_tx_thread_identify</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tx_thread_identify.o(.text._tx_thread_identify))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_get
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_schedule_other
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_identify
</UL>

<P><STRONG><a name="[25c]"></a>_tx_thread_info_get</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tx_thread_info_get.o(.text._tx_thread_info_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _tx_thread_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_info_get
</UL>

<P><STRONG><a name="[238]"></a>_tx_thread_initialize</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tx_thread_initialize.o(.text._tx_thread_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _tx_thread_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_high_level
</UL>

<P><STRONG><a name="[24a]"></a>_tx_thread_priority_change</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, tx_thread_priority_change.o(.text._tx_thread_priority_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _tx_thread_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_priority_change
</UL>

<P><STRONG><a name="[24b]"></a>_tx_thread_relinquish</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, tx_thread_relinquish.o(.text._tx_thread_relinquish))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _tx_thread_relinquish &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_analyze
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_relinquish
</UL>

<P><STRONG><a name="[b1]"></a>_tx_thread_shell_entry</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, tx_thread_shell_entry.o(.text._tx_thread_shell_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _tx_thread_shell_entry &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_thread_create.o(.text._tx_thread_create)
</UL>
<P><STRONG><a name="[155]"></a>_tx_thread_sleep</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, tx_thread_sleep.o(.text._tx_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_keyboard_thread_entry
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_mouse_thread_entry
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUserIF
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgPro
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStat
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_delay_ms
</UL>

<P><STRONG><a name="[24d]"></a>_tx_thread_stack_analyze</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, tx_thread_stack_analyze.o(.text._tx_thread_stack_analyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _tx_thread_stack_analyze
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_time_slice
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_relinquish
</UL>

<P><STRONG><a name="[24c]"></a>_tx_thread_stack_error_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tx_thread_stack_error_handler.o(.text._tx_thread_stack_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tx_thread_stack_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_time_slice
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_relinquish
</UL>

<P><STRONG><a name="[242]"></a>_tx_thread_system_preempt_check</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, tx_thread_system_preempt_check.o(.text._tx_thread_system_preempt_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _tx_thread_system_preempt_check &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_analyze
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_pool_create
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_create
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_terminate
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_priority_change
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_delete
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_prioritize
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_create
</UL>

<P><STRONG><a name="[235]"></a>_tx_thread_system_resume</STRONG> (Thumb, 536 bytes, Stack size 24 bytes, tx_thread_system_resume.o(.text._tx_thread_system_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_deactivate
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_analyze
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_cleanup
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_expiration_process
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_priority_change
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_timeout
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_put
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_delete
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_cleanup
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_cleanup
</UL>

<P><STRONG><a name="[234]"></a>_tx_thread_system_suspend</STRONG> (Thumb, 588 bytes, Stack size 24 bytes, tx_thread_system_suspend.o(.text._tx_thread_system_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_activate
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_analyze
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_allocate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_thread_entry
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_terminate
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_priority_change
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_shell_entry
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_get
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
</UL>

<P><STRONG><a name="[254]"></a>_tx_thread_terminate</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, tx_thread_terminate.o(.text._tx_thread_terminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _tx_thread_terminate &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_terminate
</UL>

<P><STRONG><a name="[10c]"></a>_tx_thread_time_slice</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, tx_thread_time_slice.o(.text._tx_thread_time_slice))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _tx_thread_time_slice &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_analyze
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_interrupt
</UL>

<P><STRONG><a name="[b0]"></a>_tx_thread_timeout</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tx_thread_timeout.o(.text._tx_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _tx_thread_timeout &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_thread_create.o(.text._tx_thread_create)
</UL>
<P><STRONG><a name="[172]"></a>_tx_time_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tx_time_get.o(.text._tx_time_get))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[10b]"></a>_tx_timer_expiration_process</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tx_timer_expiration_process.o(.text._tx_timer_expiration_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _tx_timer_expiration_process &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_interrupt
</UL>

<P><STRONG><a name="[239]"></a>_tx_timer_initialize</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, tx_timer_initialize.o(.text._tx_timer_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = _tx_timer_initialize &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_high_level
</UL>

<P><STRONG><a name="[253]"></a>_tx_timer_system_activate</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, tx_timer_system_activate.o(.text._tx_timer_system_activate))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_thread_entry
</UL>

<P><STRONG><a name="[252]"></a>_tx_timer_system_deactivate</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tx_timer_system_deactivate.o(.text._tx_timer_system_deactivate))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_terminate
</UL>

<P><STRONG><a name="[b2]"></a>_tx_timer_thread_entry</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, tx_timer_thread_entry.o(.text._tx_timer_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _tx_timer_thread_entry &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_activate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_timer_initialize.o(.text._tx_timer_initialize)
</UL>
<P><STRONG><a name="[1e3]"></a>_txe_byte_allocate</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, txe_byte_allocate.o(.text._txe_byte_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _txe_byte_allocate &rArr; _tx_byte_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USBX_Host_Init
</UL>

<P><STRONG><a name="[1e2]"></a>_txe_byte_pool_create</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, txe_byte_pool_create.o(.text._txe_byte_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = _txe_byte_pool_create &rArr; _tx_thread_system_preempt_check &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_create
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USBX_Host_Init
</UL>

<P><STRONG><a name="[159]"></a>_txe_mutex_create</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, txe_mutex_create.o(.text._txe_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = _txe_mutex_create &rArr; _tx_thread_system_preempt_check &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_mutex_create
</UL>

<P><STRONG><a name="[15c]"></a>_txe_mutex_get</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, txe_mutex_get.o(.text._txe_mutex_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_mutex_on
</UL>

<P><STRONG><a name="[15d]"></a>_txe_mutex_put</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, txe_mutex_put.o(.text._txe_mutex_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _txe_mutex_put &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_mutex_off
</UL>

<P><STRONG><a name="[255]"></a>_txe_semaphore_create</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, txe_semaphore_create.o(.text._txe_semaphore_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = _txe_semaphore_create &rArr; _tx_thread_system_preempt_check &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_create
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_create
</UL>

<P><STRONG><a name="[256]"></a>_txe_semaphore_delete</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, txe_semaphore_delete.o(.text._txe_semaphore_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _txe_semaphore_delete &rArr; _tx_semaphore_delete &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_delete
</UL>

<P><STRONG><a name="[257]"></a>_txe_semaphore_get</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, txe_semaphore_get.o(.text._txe_semaphore_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_get
</UL>

<P><STRONG><a name="[258]"></a>_txe_semaphore_put</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, txe_semaphore_put.o(.text._txe_semaphore_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _txe_semaphore_put &rArr; _tx_semaphore_put &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_put
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_put
</UL>

<P><STRONG><a name="[c6]"></a>_txe_thread_create</STRONG> (Thumb, 320 bytes, Stack size 64 bytes, txe_thread_create.o(.text._txe_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USBX_Host_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.tx_application_define)
</UL>
<P><STRONG><a name="[259]"></a>_txe_thread_delete</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, txe_thread_delete.o(.text._txe_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _txe_thread_delete &rArr; _tx_thread_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_delete
</UL>

<P><STRONG><a name="[25b]"></a>_txe_thread_info_get</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, txe_thread_info_get.o(.text._txe_thread_info_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _txe_thread_info_get &rArr; _tx_thread_info_get
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_get
</UL>

<P><STRONG><a name="[25d]"></a>_txe_thread_priority_change</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, txe_thread_priority_change.o(.text._txe_thread_priority_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _txe_thread_priority_change &rArr; _tx_thread_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_priority_change
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_schedule_other
</UL>

<P><STRONG><a name="[25e]"></a>_txe_thread_relinquish</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, txe_thread_relinquish.o(.text._txe_thread_relinquish))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _txe_thread_relinquish &rArr; _tx_thread_relinquish &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_relinquish
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_relinquish
</UL>

<P><STRONG><a name="[25f]"></a>_txe_thread_terminate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, txe_thread_terminate.o(.text._txe_thread_terminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _txe_thread_terminate &rArr; _tx_thread_terminate &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_terminate
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_delete
</UL>

<P><STRONG><a name="[267]"></a>_ux_hcd_stm32_controller_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ux_hcd_stm32_controller_disable.o(.text._ux_hcd_stm32_controller_disable))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_entry
</UL>

<P><STRONG><a name="[260]"></a>_ux_hcd_stm32_ed_obtain</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ux_hcd_stm32_ed_obtain.o(.text._ux_hcd_stm32_ed_obtain))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ux_hcd_stm32_ed_obtain
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_set
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_endpoint_create
</UL>

<P><STRONG><a name="[262]"></a>_ux_hcd_stm32_endpoint_create</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, ux_hcd_stm32_endpoint_create.o(.text._ux_hcd_stm32_endpoint_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _ux_hcd_stm32_endpoint_create &rArr; HAL_HCD_HC_Init &rArr; USB_HC_Init &rArr; USB_GetHostSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_least_traffic_list_get
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_ed_obtain
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_entry
</UL>

<P><STRONG><a name="[264]"></a>_ux_hcd_stm32_endpoint_destroy</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ux_hcd_stm32_endpoint_destroy.o(.text._ux_hcd_stm32_endpoint_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = _ux_hcd_stm32_endpoint_destroy &rArr; _ux_hcd_stm32_request_trans_finish &rArr; _ux_utility_memory_free &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_delay_ms
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_trans_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_entry
</UL>

<P><STRONG><a name="[266]"></a>_ux_hcd_stm32_endpoint_reset</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ux_hcd_stm32_endpoint_reset.o(.text._ux_hcd_stm32_endpoint_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _ux_hcd_stm32_endpoint_reset &rArr; _ux_hcd_stm32_request_trans_finish &rArr; _ux_utility_memory_free &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_trans_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_entry
</UL>

<P><STRONG><a name="[b3]"></a>_ux_hcd_stm32_entry</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, ux_hcd_stm32_entry.o(.text._ux_hcd_stm32_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = _ux_hcd_stm32_entry &rArr; _ux_hcd_stm32_periodic_schedule &rArr; _ux_hcd_stm32_request_trans_prepare &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_port_reset
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_frame_number_get
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_periodic_schedule
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_port_resume
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_port_suspend
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_port_enable
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_port_disable
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_transfer_abort
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_power_down_port
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_port_status_get
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_power_on_port
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_transfer
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_endpoint_reset
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_endpoint_destroy
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_endpoint_create
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_controller_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ux_hcd_stm32_initialize.o(.text._ux_hcd_stm32_initialize)
</UL>
<P><STRONG><a name="[272]"></a>_ux_hcd_stm32_frame_number_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ux_hcd_stm32_frame_number_get.o(.text._ux_hcd_stm32_frame_number_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ux_hcd_stm32_frame_number_get
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_entry
</UL>

<P><STRONG><a name="[aa]"></a>_ux_hcd_stm32_initialize</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ux_hcd_stm32_initialize.o(.text._ux_hcd_stm32_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = _ux_hcd_stm32_initialize &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_power_on_port
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbx_host.o(.text.USBX_APP_Host_Init)
</UL>
<P><STRONG><a name="[263]"></a>_ux_hcd_stm32_least_traffic_list_get</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, ux_hcd_stm32_least_traffic_list_get.o(.text._ux_hcd_stm32_least_traffic_list_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _ux_hcd_stm32_least_traffic_list_get
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_endpoint_create
</UL>

<P><STRONG><a name="[271]"></a>_ux_hcd_stm32_periodic_schedule</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, ux_hcd_stm32_periodic_schedule.o(.text._ux_hcd_stm32_periodic_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _ux_hcd_stm32_periodic_schedule &rArr; _ux_hcd_stm32_request_trans_prepare &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentFrame
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_SubmitRequest
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_trans_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_entry
</UL>

<P><STRONG><a name="[26d]"></a>_ux_hcd_stm32_port_disable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_hcd_stm32_port_disable.o(.text._ux_hcd_stm32_port_disable))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_entry
</UL>

<P><STRONG><a name="[26e]"></a>_ux_hcd_stm32_port_enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_hcd_stm32_port_enable.o(.text._ux_hcd_stm32_port_enable))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_entry
</UL>

<P><STRONG><a name="[273]"></a>_ux_hcd_stm32_port_reset</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ux_hcd_stm32_port_reset.o(.text._ux_hcd_stm32_port_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ux_hcd_stm32_port_reset &rArr; HAL_HCD_ResetPort &rArr; USB_ResetPort &rArr; HAL_Delay &rArr; bsp_DelayMS &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_ResetPort
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_entry
</UL>

<P><STRONG><a name="[270]"></a>_ux_hcd_stm32_port_resume</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_hcd_stm32_port_resume.o(.text._ux_hcd_stm32_port_resume))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_entry
</UL>

<P><STRONG><a name="[26a]"></a>_ux_hcd_stm32_port_status_get</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ux_hcd_stm32_port_status_get.o(.text._ux_hcd_stm32_port_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ux_hcd_stm32_port_status_get &rArr; _ux_system_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentSpeed
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_entry
</UL>

<P><STRONG><a name="[26f]"></a>_ux_hcd_stm32_port_suspend</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_hcd_stm32_port_suspend.o(.text._ux_hcd_stm32_port_suspend))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_entry
</UL>

<P><STRONG><a name="[26b]"></a>_ux_hcd_stm32_power_down_port</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_hcd_stm32_power_down_port.o(.text._ux_hcd_stm32_power_down_port))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_entry
</UL>

<P><STRONG><a name="[269]"></a>_ux_hcd_stm32_power_on_port</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ux_hcd_stm32_power_on_port.o(.text._ux_hcd_stm32_power_on_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ux_hcd_stm32_power_on_port &rArr; _ux_system_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_initialize
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_entry
</UL>

<P><STRONG><a name="[275]"></a>_ux_hcd_stm32_request_bulk_transfer</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, ux_hcd_stm32_request_bulk_transfer.o(.text._ux_hcd_stm32_request_bulk_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _ux_hcd_stm32_request_bulk_transfer &rArr; _ux_hcd_stm32_request_trans_prepare &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_SubmitRequest
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_trans_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_transfer
</UL>

<P><STRONG><a name="[276]"></a>_ux_hcd_stm32_request_control_transfer</STRONG> (Thumb, 572 bytes, Stack size 56 bytes, ux_hcd_stm32_request_control_transfer.o(.text._ux_hcd_stm32_request_control_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _ux_hcd_stm32_request_control_transfer &rArr; _ux_hcd_stm32_request_trans_prepare &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_SubmitRequest
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_get
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request_abort
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_trans_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_transfer
</UL>

<P><STRONG><a name="[279]"></a>_ux_hcd_stm32_request_periodic_transfer</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ux_hcd_stm32_request_periodic_transfer.o(.text._ux_hcd_stm32_request_periodic_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ux_hcd_stm32_request_periodic_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_transfer
</UL>

<P><STRONG><a name="[183]"></a>_ux_hcd_stm32_request_trans_finish</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ux_hcd_stm32_request_trans_finish.o(.text._ux_hcd_stm32_request_trans_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _ux_hcd_stm32_request_trans_finish &rArr; _ux_utility_memory_free &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_copy
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_transfer_abort
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_endpoint_reset
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_endpoint_destroy
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_NotifyURBChange_Callback
</UL>

<P><STRONG><a name="[184]"></a>_ux_hcd_stm32_request_trans_prepare</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ux_hcd_stm32_request_trans_prepare.o(.text._ux_hcd_stm32_request_trans_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _ux_hcd_stm32_request_trans_prepare &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_copy
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_control_transfer
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_bulk_transfer
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_periodic_schedule
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_NotifyURBChange_Callback
</UL>

<P><STRONG><a name="[268]"></a>_ux_hcd_stm32_request_transfer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ux_hcd_stm32_request_transfer.o(.text._ux_hcd_stm32_request_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _ux_hcd_stm32_request_transfer &rArr; _ux_hcd_stm32_request_control_transfer &rArr; _ux_hcd_stm32_request_trans_prepare &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_periodic_transfer
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_control_transfer
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_bulk_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_entry
</UL>

<P><STRONG><a name="[26c]"></a>_ux_hcd_stm32_transfer_abort</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ux_hcd_stm32_transfer_abort.o(.text._ux_hcd_stm32_transfer_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _ux_hcd_stm32_transfer_abort &rArr; _ux_hcd_stm32_request_trans_finish &rArr; _ux_utility_memory_free &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Halt
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_delay_ms
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_trans_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_entry
</UL>

<P><STRONG><a name="[27a]"></a>_ux_host_class_hid_activate</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, ux_host_class_hid_activate.o(.text._ux_host_class_hid_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = _ux_host_class_hid_activate &rArr; _ux_host_class_hid_descriptor_parse &rArr; _ux_host_class_hid_report_descriptor_get &rArr; _ux_host_class_hid_main_item_parse &rArr; _ux_host_class_hid_report_add &rArr; _ux_utility_memory_allocate_mulc_safe &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_instance_destroy
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_instance_create
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_create
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_client_search
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_instance_clean
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_interrupt_endpoint_search
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_descriptor_parse
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_entry
</UL>

<P><STRONG><a name="[1e8]"></a>_ux_host_class_hid_client_register</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ux_host_class_hid_client_register.o(.text._ux_host_class_hid_client_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _ux_host_class_hid_client_register &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_string_length_check
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_copy
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_get
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USBX_Host_Init
</UL>

<P><STRONG><a name="[282]"></a>_ux_host_class_hid_client_search</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, ux_host_class_hid_client_search.o(.text._ux_host_class_hid_client_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _ux_host_class_hid_client_search &rArr; _ux_system_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_activate
</UL>

<P><STRONG><a name="[27c]"></a>_ux_host_class_hid_configure</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ux_host_class_hid_configure.o(.text._ux_host_class_hid_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = _ux_host_class_hid_configure &rArr; _ux_host_stack_device_configuration_select &rArr; _ux_host_stack_configuration_set &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_interface_get
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_configuration_select
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_configuration_get
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_activate
</UL>

<P><STRONG><a name="[288]"></a>_ux_host_class_hid_deactivate</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ux_host_class_hid_deactivate.o(.text._ux_host_class_hid_deactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _ux_host_class_hid_deactivate &rArr; _ux_host_class_hid_instance_clean &rArr; _ux_utility_memory_free &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_get
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_schedule_other
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_endpoint_transfer_abort
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_instance_destroy
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_delete
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_instance_clean
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_entry
</UL>

<P><STRONG><a name="[27d]"></a>_ux_host_class_hid_descriptor_parse</STRONG> (Thumb, 224 bytes, Stack size 104 bytes, ux_host_class_hid_descriptor_parse.o(.text._ux_host_class_hid_descriptor_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = _ux_host_class_hid_descriptor_parse &rArr; _ux_host_class_hid_report_descriptor_get &rArr; _ux_host_class_hid_main_item_parse &rArr; _ux_host_class_hid_report_add &rArr; _ux_utility_memory_allocate_mulc_safe &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_descriptor_parse
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_descriptor_get
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_activate
</UL>

<P><STRONG><a name="[a2]"></a>_ux_host_class_hid_entry</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, ux_host_class_hid_entry.o(.text._ux_host_class_hid_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = _ux_host_class_hid_entry &rArr; _ux_host_class_hid_activate &rArr; _ux_host_class_hid_descriptor_parse &rArr; _ux_host_class_hid_report_descriptor_get &rArr; _ux_host_class_hid_main_item_parse &rArr; _ux_host_class_hid_report_add &rArr; _ux_utility_memory_allocate_mulc_safe &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_deactivate
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_activate
</UL>
<BR>[Address Reference Count : 2]<UL><LI> app_usbx_host.o(.text.MX_USBX_Host_Init)
<LI> app_usbx_host.o(.text.ux_host_event_callback)
</UL>
<P><STRONG><a name="[2a8]"></a>_ux_host_class_hid_field_decompress</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, ux_host_class_hid_field_decompress.o(.text._ux_host_class_hid_field_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _ux_host_class_hid_field_decompress
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_decompress
</UL>

<P><STRONG><a name="[28e]"></a>_ux_host_class_hid_global_item_parse</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, ux_host_class_hid_global_item_parse.o(.text._ux_host_class_hid_global_item_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ux_host_class_hid_global_item_parse &rArr; _ux_system_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_copy
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_descriptor_get
</UL>

<P><STRONG><a name="[28f]"></a>_ux_host_class_hid_idle_set</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ux_host_class_hid_idle_set.o(.text._ux_host_class_hid_idle_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _ux_host_class_hid_idle_set &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_get
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_put
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_instance_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_mouse_activate
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_activate
</UL>

<P><STRONG><a name="[280]"></a>_ux_host_class_hid_instance_clean</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ux_host_class_hid_instance_clean.o(.text._ux_host_class_hid_instance_clean))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _ux_host_class_hid_instance_clean &rArr; _ux_utility_memory_free &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_deactivate
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_activate
</UL>

<P><STRONG><a name="[27e]"></a>_ux_host_class_hid_interrupt_endpoint_search</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ux_host_class_hid_interrupt_endpoint_search.o(.text._ux_host_class_hid_interrupt_endpoint_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _ux_host_class_hid_interrupt_endpoint_search &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_activate
</UL>

<P><STRONG><a name="[1f5]"></a>_ux_host_class_hid_item_data_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ux_host_class_hid_item_data_get.o(.text._ux_host_class_hid_item_data_get))
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_short_get
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_long_get
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_add
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_main_item_parse
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[293]"></a>_ux_host_class_hid_keyboard_activate</STRONG> (Thumb, 432 bytes, Stack size 136 bytes, ux_host_class_hid_keyboard_activate.o(.text._ux_host_class_hid_keyboard_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = _ux_host_class_hid_keyboard_activate &rArr; _ux_host_class_hid_report_set &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_copy
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_create
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_delete
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_delete
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_create
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_periodic_report_start
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_set
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_callback_register
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_id_get
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_idle_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_entry
</UL>

<P><STRONG><a name="[b6]"></a>_ux_host_class_hid_keyboard_callback</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, ux_host_class_hid_keyboard_callback.o(.text._ux_host_class_hid_keyboard_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _ux_host_class_hid_keyboard_callback &rArr; _ux_utility_semaphore_put &rArr; _txe_semaphore_put &rArr; _tx_semaphore_put &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_copy
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_set
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_put
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ux_host_class_hid_keyboard_activate.o(.text._ux_host_class_hid_keyboard_activate)
</UL>
<P><STRONG><a name="[29a]"></a>_ux_host_class_hid_keyboard_deactivate</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ux_host_class_hid_keyboard_deactivate.o(.text._ux_host_class_hid_keyboard_deactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _ux_host_class_hid_keyboard_deactivate &rArr; _ux_host_class_hid_periodic_report_stop &rArr; _ux_host_stack_endpoint_transfer_abort &rArr; _ux_host_stack_transfer_request_abort &rArr; _ux_utility_semaphore_put &rArr; _txe_semaphore_put &rArr; _tx_semaphore_put &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_delete
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_delete
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_periodic_report_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_entry
</UL>

<P><STRONG><a name="[a4]"></a>_ux_host_class_hid_keyboard_entry</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ux_host_class_hid_keyboard_entry.o(.text._ux_host_class_hid_keyboard_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = _ux_host_class_hid_keyboard_entry &rArr; _ux_host_class_hid_keyboard_activate &rArr; _ux_host_class_hid_report_set &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_deactivate
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_activate
</UL>
<BR>[Address Reference Count : 2]<UL><LI> app_usbx_host.o(.text.MX_USBX_Host_Init)
<LI> app_usbx_host.o(.text.ux_host_event_callback)
</UL>
<P><STRONG><a name="[29c]"></a>_ux_host_class_hid_keyboard_key_get</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ux_host_class_hid_keyboard_key_get.o(.text._ux_host_class_hid_keyboard_key_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _ux_host_class_hid_keyboard_key_get &rArr; _ux_host_stack_class_instance_verify &rArr; _ux_utility_string_length_check &rArr; _ux_system_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_instance_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_keyboard_thread_entry
</UL>

<P><STRONG><a name="[b7]"></a>_ux_host_class_hid_keyboard_thread</STRONG> (Thumb, 102 bytes, Stack size 72 bytes, ux_host_class_hid_keyboard_thread.o(.text._ux_host_class_hid_keyboard_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = _ux_host_class_hid_keyboard_thread &rArr; _ux_host_class_hid_report_set &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_get
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_set
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_id_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ux_host_class_hid_keyboard_activate.o(.text._ux_host_class_hid_keyboard_activate)
</UL>
<P><STRONG><a name="[29d]"></a>_ux_host_class_hid_local_item_parse</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, ux_host_class_hid_local_item_parse.o(.text._ux_host_class_hid_local_item_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ux_host_class_hid_local_item_parse &rArr; _ux_system_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_descriptor_get
</UL>

<P><STRONG><a name="[29e]"></a>_ux_host_class_hid_main_item_parse</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, ux_host_class_hid_main_item_parse.o(.text._ux_host_class_hid_main_item_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _ux_host_class_hid_main_item_parse &rArr; _ux_host_class_hid_report_add &rArr; _ux_utility_memory_allocate_mulc_safe &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_set
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_add
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_item_data_get
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_descriptor_get
</UL>

<P><STRONG><a name="[2a0]"></a>_ux_host_class_hid_mouse_activate</STRONG> (Thumb, 188 bytes, Stack size 80 bytes, ux_host_class_hid_mouse_activate.o(.text._ux_host_class_hid_mouse_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _ux_host_class_hid_mouse_activate &rArr; _ux_host_class_hid_idle_set &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_copy
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_periodic_report_start
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_callback_register
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_id_get
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_idle_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_mouse_entry
</UL>

<P><STRONG><a name="[2a1]"></a>_ux_host_class_hid_mouse_buttons_get</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ux_host_class_hid_mouse_buttons_get.o(.text._ux_host_class_hid_mouse_buttons_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _ux_host_class_hid_mouse_buttons_get &rArr; _ux_host_stack_class_instance_verify &rArr; _ux_utility_string_length_check &rArr; _ux_system_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_instance_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_mouse_thread_entry
</UL>

<P><STRONG><a name="[b9]"></a>_ux_host_class_hid_mouse_callback</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, ux_host_class_hid_mouse_callback.o(.text._ux_host_class_hid_mouse_callback))
<BR>[Address Reference Count : 1]<UL><LI> ux_host_class_hid_mouse_activate.o(.text._ux_host_class_hid_mouse_activate)
</UL>
<P><STRONG><a name="[2a2]"></a>_ux_host_class_hid_mouse_deactivate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ux_host_class_hid_mouse_deactivate.o(.text._ux_host_class_hid_mouse_deactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _ux_host_class_hid_mouse_deactivate &rArr; _ux_utility_memory_free &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_periodic_report_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_mouse_entry
</UL>

<P><STRONG><a name="[a3]"></a>_ux_host_class_hid_mouse_entry</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ux_host_class_hid_mouse_entry.o(.text._ux_host_class_hid_mouse_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _ux_host_class_hid_mouse_entry &rArr; _ux_host_class_hid_mouse_activate &rArr; _ux_host_class_hid_idle_set &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_mouse_deactivate
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_mouse_activate
</UL>
<BR>[Address Reference Count : 2]<UL><LI> app_usbx_host.o(.text.MX_USBX_Host_Init)
<LI> app_usbx_host.o(.text.ux_host_event_callback)
</UL>
<P><STRONG><a name="[2a3]"></a>_ux_host_class_hid_mouse_position_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ux_host_class_hid_mouse_position_get.o(.text._ux_host_class_hid_mouse_position_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _ux_host_class_hid_mouse_position_get &rArr; _ux_host_stack_class_instance_verify &rArr; _ux_utility_string_length_check &rArr; _ux_system_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_instance_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_mouse_thread_entry
</UL>

<P><STRONG><a name="[2a4]"></a>_ux_host_class_hid_mouse_wheel_get</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ux_host_class_hid_mouse_wheel_get.o(.text._ux_host_class_hid_mouse_wheel_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _ux_host_class_hid_mouse_wheel_get &rArr; _ux_host_stack_class_instance_verify &rArr; _ux_utility_string_length_check &rArr; _ux_system_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_instance_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_mouse_thread_entry
</UL>

<P><STRONG><a name="[298]"></a>_ux_host_class_hid_periodic_report_start</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ux_host_class_hid_periodic_report_start.o(.text._ux_host_class_hid_periodic_report_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _ux_host_class_hid_periodic_report_start &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_get
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_put
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_instance_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_mouse_activate
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_activate
</UL>

<P><STRONG><a name="[29b]"></a>_ux_host_class_hid_periodic_report_stop</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ux_host_class_hid_periodic_report_stop.o(.text._ux_host_class_hid_periodic_report_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _ux_host_class_hid_periodic_report_stop &rArr; _ux_host_stack_endpoint_transfer_abort &rArr; _ux_host_stack_transfer_request_abort &rArr; _ux_utility_semaphore_put &rArr; _txe_semaphore_put &rArr; _tx_semaphore_put &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_instance_verify
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_endpoint_transfer_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_mouse_deactivate
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_deactivate
</UL>

<P><STRONG><a name="[29f]"></a>_ux_host_class_hid_report_add</STRONG> (Thumb, 380 bytes, Stack size 40 bytes, ux_host_class_hid_report_add.o(.text._ux_host_class_hid_report_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _ux_host_class_hid_report_add &rArr; _ux_utility_memory_allocate_mulc_safe &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_copy
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate_mulc_safe
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_item_data_get
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_main_item_parse
</UL>

<P><STRONG><a name="[295]"></a>_ux_host_class_hid_report_callback_register</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ux_host_class_hid_report_callback_register.o(.text._ux_host_class_hid_report_callback_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _ux_host_class_hid_report_callback_register &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_get
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_put
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_instance_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_mouse_activate
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_activate
</UL>

<P><STRONG><a name="[2a6]"></a>_ux_host_class_hid_report_compress</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ux_host_class_hid_report_compress.o(.text._ux_host_class_hid_report_compress))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _ux_host_class_hid_report_compress &rArr; _ux_system_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_set
</UL>

<P><STRONG><a name="[2a7]"></a>_ux_host_class_hid_report_decompress</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ux_host_class_hid_report_decompress.o(.text._ux_host_class_hid_report_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _ux_host_class_hid_report_decompress &rArr; _ux_host_class_hid_field_decompress
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_field_decompress
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_transfer_request_completed
</UL>

<P><STRONG><a name="[28d]"></a>_ux_host_class_hid_report_descriptor_get</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, ux_host_class_hid_report_descriptor_get.o(.text._ux_host_class_hid_report_descriptor_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _ux_host_class_hid_report_descriptor_get &rArr; _ux_host_class_hid_main_item_parse &rArr; _ux_host_class_hid_report_add &rArr; _ux_utility_memory_allocate_mulc_safe &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_resources_free
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_item_analyse
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_main_item_parse
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_local_item_parse
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_global_item_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_descriptor_parse
</UL>

<P><STRONG><a name="[294]"></a>_ux_host_class_hid_report_id_get</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ux_host_class_hid_report_id_get.o(.text._ux_host_class_hid_report_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _ux_host_class_hid_report_id_get &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_get
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_put
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_instance_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_mouse_activate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_thread
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_activate
</UL>

<P><STRONG><a name="[2a9]"></a>_ux_host_class_hid_report_item_analyse</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ux_host_class_hid_report_item_analyse.o(.text._ux_host_class_hid_report_item_analyse))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_descriptor_get
</UL>

<P><STRONG><a name="[297]"></a>_ux_host_class_hid_report_set</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, ux_host_class_hid_report_set.o(.text._ux_host_class_hid_report_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _ux_host_class_hid_report_set &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_copy
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_get
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_put
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_instance_verify
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate_add_safe
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_compress
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_thread
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_activate
</UL>

<P><STRONG><a name="[2aa]"></a>_ux_host_class_hid_resources_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_host_class_hid_resources_free.o(.text._ux_host_class_hid_resources_free))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_descriptor_get
</UL>

<P><STRONG><a name="[b5]"></a>_ux_host_class_hid_transfer_request_completed</STRONG> (Thumb, 280 bytes, Stack size 96 bytes, ux_host_class_hid_transfer_request_completed.o(.text._ux_host_class_hid_transfer_request_completed))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = _ux_host_class_hid_transfer_request_completed &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_decompress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ux_host_class_hid_interrupt_endpoint_search.o(.text._ux_host_class_hid_interrupt_endpoint_search)
</UL>
<P><STRONG><a name="[2ac]"></a>_ux_host_class_hub_activate</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ux_host_class_hub_activate.o(.text._ux_host_class_hub_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = _ux_host_class_hub_activate &rArr; _ux_host_class_hub_configure &rArr; _ux_host_stack_device_configuration_select &rArr; _ux_host_stack_configuration_set &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_instance_create
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_interrupt_endpoint_start
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_ports_power
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_descriptor_get
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_entry
</UL>

<P><STRONG><a name="[ba]"></a>_ux_host_class_hub_change_detect</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ux_host_class_hub_change_detect.o(.text._ux_host_class_hub_change_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = _ux_host_class_hub_change_detect &rArr; _ux_host_class_hub_change_process &rArr; _ux_host_class_hub_port_change_process &rArr; _ux_host_class_hub_port_change_connection_process &rArr; _ux_host_stack_new_device_create &rArr; _ux_host_stack_configuration_enumerate &rArr; _ux_host_stack_configuration_descriptor_parse &rArr; _ux_host_stack_interfaces_scan &rArr; _ux_host_stack_new_interface_create &rArr; _ux_host_stack_new_endpoint_create &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_instance_get
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_get
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_change_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ux_host_class_hub_activate.o(.text._ux_host_class_hub_activate)
</UL>
<P><STRONG><a name="[2b2]"></a>_ux_host_class_hub_change_process</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ux_host_class_hub_change_process.o(.text._ux_host_class_hub_change_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = _ux_host_class_hub_change_process &rArr; _ux_host_class_hub_port_change_process &rArr; _ux_host_class_hub_port_change_connection_process &rArr; _ux_host_stack_new_device_create &rArr; _ux_host_stack_configuration_enumerate &rArr; _ux_host_stack_configuration_descriptor_parse &rArr; _ux_host_stack_interfaces_scan &rArr; _ux_host_stack_new_interface_create &rArr; _ux_host_stack_new_endpoint_create &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_short_get
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_hub_change_process
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_process
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_change_detect
</UL>

<P><STRONG><a name="[2ad]"></a>_ux_host_class_hub_configure</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, ux_host_class_hub_configure.o(.text._ux_host_class_hub_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = _ux_host_class_hub_configure &rArr; _ux_host_stack_device_configuration_select &rArr; _ux_host_stack_configuration_set &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_interface_get
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_configuration_select
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_configuration_get
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_activate
</UL>

<P><STRONG><a name="[2b5]"></a>_ux_host_class_hub_deactivate</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ux_host_class_hub_deactivate.o(.text._ux_host_class_hub_deactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _ux_host_class_hub_deactivate &rArr; _ux_host_stack_device_remove &rArr; _ux_host_stack_device_resources_free &rArr; _ux_utility_memory_free &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_schedule_other
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_remove
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_endpoint_transfer_abort
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_instance_destroy
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_entry
</UL>

<P><STRONG><a name="[2ae]"></a>_ux_host_class_hub_descriptor_get</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, ux_host_class_hub_descriptor_get.o(.text._ux_host_class_hub_descriptor_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _ux_host_class_hub_descriptor_get &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_descriptor_parse
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_activate
</UL>

<P><STRONG><a name="[a5]"></a>_ux_host_class_hub_entry</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ux_host_class_hub_entry.o(.text._ux_host_class_hub_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = _ux_host_class_hub_entry &rArr; _ux_host_class_hub_activate &rArr; _ux_host_class_hub_configure &rArr; _ux_host_stack_device_configuration_select &rArr; _ux_host_stack_configuration_set &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_activate
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_deactivate
</UL>
<BR>[Address Reference Count : 2]<UL><LI> app_usbx_host.o(.text.MX_USBX_Host_Init)
<LI> app_usbx_host.o(.text.ux_host_event_callback)
</UL>
<P><STRONG><a name="[bc]"></a>_ux_host_class_hub_feature</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ux_host_class_hub_feature.o(.text._ux_host_class_hub_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = _ux_host_class_hub_feature &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_ports_power
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_reset_process
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_suspend_process
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_over_current_process
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_enable_process
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_reset
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_connection_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ux_host_class_hub_port_change_connection_process.o(.text._ux_host_class_hub_port_change_connection_process)
</UL>
<P><STRONG><a name="[2b4]"></a>_ux_host_class_hub_hub_change_process</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_host_class_hub_hub_change_process.o(.text._ux_host_class_hub_hub_change_process))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_change_process
</UL>

<P><STRONG><a name="[2b0]"></a>_ux_host_class_hub_interrupt_endpoint_start</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ux_host_class_hub_interrupt_endpoint_start.o(.text._ux_host_class_hub_interrupt_endpoint_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _ux_host_class_hub_interrupt_endpoint_start &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_interface_endpoint_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_activate
</UL>

<P><STRONG><a name="[2b8]"></a>_ux_host_class_hub_port_change_connection_process</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, ux_host_class_hub_port_change_connection_process.o(.text._ux_host_class_hub_port_change_connection_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = _ux_host_class_hub_port_change_connection_process &rArr; _ux_host_stack_new_device_create &rArr; _ux_host_stack_configuration_enumerate &rArr; _ux_host_stack_configuration_descriptor_parse &rArr; _ux_host_stack_interfaces_scan &rArr; _ux_host_stack_new_interface_create &rArr; _ux_host_stack_new_endpoint_create &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_new_device_create
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_remove
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_delay_ms
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_status_get
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_reset
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_process
</UL>

<P><STRONG><a name="[2bc]"></a>_ux_host_class_hub_port_change_enable_process</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ux_host_class_hub_port_change_enable_process.o(.text._ux_host_class_hub_port_change_enable_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = _ux_host_class_hub_port_change_enable_process &rArr; _ux_host_class_hub_feature &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_process
</UL>

<P><STRONG><a name="[2bd]"></a>_ux_host_class_hub_port_change_over_current_process</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ux_host_class_hub_port_change_over_current_process.o(.text._ux_host_class_hub_port_change_over_current_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _ux_host_class_hub_port_change_over_current_process &rArr; _ux_host_class_hub_feature &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_process
</UL>

<P><STRONG><a name="[2b3]"></a>_ux_host_class_hub_port_change_process</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ux_host_class_hub_port_change_process.o(.text._ux_host_class_hub_port_change_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = _ux_host_class_hub_port_change_process &rArr; _ux_host_class_hub_port_change_connection_process &rArr; _ux_host_stack_new_device_create &rArr; _ux_host_stack_configuration_enumerate &rArr; _ux_host_stack_configuration_descriptor_parse &rArr; _ux_host_stack_interfaces_scan &rArr; _ux_host_stack_new_interface_create &rArr; _ux_host_stack_new_endpoint_create &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_reset_process
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_suspend_process
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_over_current_process
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_enable_process
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_status_get
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_connection_process
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_change_process
</UL>

<P><STRONG><a name="[2c0]"></a>_ux_host_class_hub_port_change_reset_process</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ux_host_class_hub_port_change_reset_process.o(.text._ux_host_class_hub_port_change_reset_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = _ux_host_class_hub_port_change_reset_process &rArr; _ux_host_class_hub_feature &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_process
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_reset
</UL>

<P><STRONG><a name="[2bf]"></a>_ux_host_class_hub_port_change_suspend_process</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ux_host_class_hub_port_change_suspend_process.o(.text._ux_host_class_hub_port_change_suspend_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = _ux_host_class_hub_port_change_suspend_process &rArr; _ux_host_class_hub_feature &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_process
</UL>

<P><STRONG><a name="[2b9]"></a>_ux_host_class_hub_port_reset</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, ux_host_class_hub_port_reset.o(.text._ux_host_class_hub_port_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _ux_host_class_hub_port_reset &rArr; _ux_host_class_hub_status_get &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_delay_ms
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_reset_process
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_status_get
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_connection_process
</UL>

<P><STRONG><a name="[2af]"></a>_ux_host_class_hub_ports_power</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ux_host_class_hub_ports_power.o(.text._ux_host_class_hub_ports_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _ux_host_class_hub_ports_power &rArr; _ux_host_class_hub_feature &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_delay_ms
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_activate
</UL>

<P><STRONG><a name="[2ba]"></a>_ux_host_class_hub_status_get</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, ux_host_class_hub_status_get.o(.text._ux_host_class_hub_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _ux_host_class_hub_status_get &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_short_get
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_process
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_reset
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_connection_process
</UL>

<P><STRONG><a name="[bb]"></a>_ux_host_class_hub_transfer_request_completed</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ux_host_class_hub_transfer_request_completed.o(.text._ux_host_class_hub_transfer_request_completed))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = _ux_host_class_hub_transfer_request_completed &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_put
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ux_host_class_hub_interrupt_endpoint_start.o(.text._ux_host_class_hub_interrupt_endpoint_start)
</UL>
<P><STRONG><a name="[2c1]"></a>_ux_host_stack_bandwidth_check</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, ux_host_stack_bandwidth_check.o(.text._ux_host_stack_bandwidth_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ux_host_stack_bandwidth_check &rArr; _ux_system_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_endpoint_instance_create
</UL>

<P><STRONG><a name="[2d5]"></a>_ux_host_stack_bandwidth_claim</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, ux_host_stack_bandwidth_claim.o(.text._ux_host_stack_bandwidth_claim))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ux_host_stack_bandwidth_claim
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_endpoint_instance_create
</UL>

<P><STRONG><a name="[2d6]"></a>_ux_host_stack_bandwidth_release</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, ux_host_stack_bandwidth_release.o(.text._ux_host_stack_bandwidth_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ux_host_stack_bandwidth_release
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_endpoint_instance_delete
</UL>

<P><STRONG><a name="[2c3]"></a>_ux_host_stack_class_call</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ux_host_stack_class_call.o(.text._ux_host_stack_class_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ux_host_stack_class_call
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_interface_scan
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_device_scan
</UL>

<P><STRONG><a name="[2c2]"></a>_ux_host_stack_class_device_scan</STRONG> (Thumb, 82 bytes, Stack size 72 bytes, ux_host_stack_class_device_scan.o(.text._ux_host_stack_class_device_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _ux_host_stack_class_device_scan &rArr; _ux_host_stack_class_call
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_call
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_new_device_create
</UL>

<P><STRONG><a name="[284]"></a>_ux_host_stack_class_get</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ux_host_stack_class_get.o(.text._ux_host_stack_class_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _ux_host_stack_class_get &rArr; _ux_utility_string_length_check &rArr; _ux_system_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_compare
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_string_length_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_client_register
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_change_detect
</UL>

<P><STRONG><a name="[27b]"></a>_ux_host_stack_class_instance_create</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ux_host_stack_class_instance_create.o(.text._ux_host_stack_class_instance_create))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_activate
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_activate
</UL>

<P><STRONG><a name="[281]"></a>_ux_host_stack_class_instance_destroy</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ux_host_stack_class_instance_destroy.o(.text._ux_host_stack_class_instance_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ux_host_stack_class_instance_destroy &rArr; _ux_system_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_deactivate
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_activate
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_deactivate
</UL>

<P><STRONG><a name="[2b1]"></a>_ux_host_stack_class_instance_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ux_host_stack_class_instance_get.o(.text._ux_host_stack_class_instance_get))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_change_detect
</UL>

<P><STRONG><a name="[290]"></a>_ux_host_stack_class_instance_verify</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ux_host_stack_class_instance_verify.o(.text._ux_host_stack_class_instance_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _ux_host_stack_class_instance_verify &rArr; _ux_utility_string_length_check &rArr; _ux_system_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_compare
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_string_length_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_mouse_wheel_get
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_mouse_buttons_get
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_mouse_position_get
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_key_get
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_periodic_report_stop
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_periodic_report_start
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_set
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_callback_register
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_id_get
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_idle_set
</UL>

<P><STRONG><a name="[2c5]"></a>_ux_host_stack_class_interface_scan</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ux_host_stack_class_interface_scan.o(.text._ux_host_stack_class_interface_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = _ux_host_stack_class_interface_scan &rArr; _ux_host_stack_configuration_interface_scan &rArr; _ux_host_stack_device_configuration_select &rArr; _ux_host_stack_configuration_set &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_interface_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_new_device_create
</UL>

<P><STRONG><a name="[1e7]"></a>_ux_host_stack_class_register</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ux_host_stack_class_register.o(.text._ux_host_stack_class_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _ux_host_stack_class_register &rArr; _ux_utility_string_length_check &rArr; _ux_system_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_string_length_check
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_copy
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USBX_Host_Init
</UL>

<P><STRONG><a name="[2c7]"></a>_ux_host_stack_configuration_descriptor_parse</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ux_host_stack_configuration_descriptor_parse.o(.text._ux_host_stack_configuration_descriptor_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = _ux_host_stack_configuration_descriptor_parse &rArr; _ux_host_stack_interfaces_scan &rArr; _ux_host_stack_new_interface_create &rArr; _ux_host_stack_new_endpoint_create &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_interfaces_scan
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_enumerate
</UL>

<P><STRONG><a name="[2c9]"></a>_ux_host_stack_configuration_enumerate</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, ux_host_stack_configuration_enumerate.o(.text._ux_host_stack_configuration_enumerate))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = _ux_host_stack_configuration_enumerate &rArr; _ux_host_stack_configuration_descriptor_parse &rArr; _ux_host_stack_interfaces_scan &rArr; _ux_host_stack_new_interface_create &rArr; _ux_host_stack_new_endpoint_create &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_descriptor_parse
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_instance_delete
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_new_configuration_create
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_descriptor_parse
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_new_device_create
</UL>

<P><STRONG><a name="[2cc]"></a>_ux_host_stack_configuration_instance_create</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ux_host_stack_configuration_instance_create.o(.text._ux_host_stack_configuration_instance_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = _ux_host_stack_configuration_instance_create &rArr; _ux_host_stack_interface_instance_create &rArr; _ux_host_stack_endpoint_instance_create &rArr; _ux_utility_semaphore_create &rArr; _txe_semaphore_create &rArr; _tx_thread_system_preempt_check &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_interface_instance_create
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_configuration_select
</UL>

<P><STRONG><a name="[2cb]"></a>_ux_host_stack_configuration_instance_delete</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ux_host_stack_configuration_instance_delete.o(.text._ux_host_stack_configuration_instance_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _ux_host_stack_configuration_instance_delete &rArr; _ux_host_stack_interface_instance_delete &rArr; _ux_host_stack_endpoint_instance_delete &rArr; _ux_utility_semaphore_delete &rArr; _txe_semaphore_delete &rArr; _tx_semaphore_delete &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_interface_instance_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_enumerate
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_configuration_select
</UL>

<P><STRONG><a name="[287]"></a>_ux_host_stack_configuration_interface_get</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ux_host_stack_configuration_interface_get.o(.text._ux_host_stack_configuration_interface_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ux_host_stack_configuration_interface_get &rArr; _ux_system_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_configure
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_configure
</UL>

<P><STRONG><a name="[2c6]"></a>_ux_host_stack_configuration_interface_scan</STRONG> (Thumb, 138 bytes, Stack size 96 bytes, ux_host_stack_configuration_interface_scan.o(.text._ux_host_stack_configuration_interface_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = _ux_host_stack_configuration_interface_scan &rArr; _ux_host_stack_device_configuration_select &rArr; _ux_host_stack_configuration_set &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_call
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_configuration_select
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_interface_scan
</UL>

<P><STRONG><a name="[2cf]"></a>_ux_host_stack_configuration_set</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ux_host_stack_configuration_set.o(.text._ux_host_stack_configuration_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _ux_host_stack_configuration_set &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_configuration_select
</UL>

<P><STRONG><a name="[2d0]"></a>_ux_host_stack_device_address_set</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ux_host_stack_device_address_set.o(.text._ux_host_stack_device_address_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _ux_host_stack_device_address_set &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_new_device_create
</UL>

<P><STRONG><a name="[285]"></a>_ux_host_stack_device_configuration_get</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ux_host_stack_device_configuration_get.o(.text._ux_host_stack_device_configuration_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ux_host_stack_device_configuration_get &rArr; _ux_system_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_configure
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_configure
</UL>

<P><STRONG><a name="[286]"></a>_ux_host_stack_device_configuration_select</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ux_host_stack_device_configuration_select.o(.text._ux_host_stack_device_configuration_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = _ux_host_stack_device_configuration_select &rArr; _ux_host_stack_configuration_set &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_set
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_instance_create
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_instance_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_interface_scan
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_configure
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_configure
</UL>

<P><STRONG><a name="[2d1]"></a>_ux_host_stack_device_descriptor_read</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, ux_host_stack_device_descriptor_read.o(.text._ux_host_stack_device_descriptor_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _ux_host_stack_device_descriptor_read &rArr; _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_new_device_create
</UL>

<P><STRONG><a name="[2b6]"></a>_ux_host_stack_device_remove</STRONG> (Thumb, 200 bytes, Stack size 80 bytes, ux_host_stack_device_remove.o(.text._ux_host_stack_device_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _ux_host_stack_device_remove &rArr; _ux_host_stack_device_resources_free &rArr; _ux_utility_memory_free &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_resources_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_rh_device_insertion
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_rh_device_extraction
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_connection_process
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_deactivate
</UL>

<P><STRONG><a name="[2d2]"></a>_ux_host_stack_device_resources_free</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, ux_host_stack_device_resources_free.o(.text._ux_host_stack_device_resources_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = _ux_host_stack_device_resources_free &rArr; _ux_utility_memory_free &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_set
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_schedule_other
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_endpoint_instance_delete
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_endpoint_transfer_abort
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_delete
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_remove
</UL>

<P><STRONG><a name="[2d4]"></a>_ux_host_stack_endpoint_instance_create</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ux_host_stack_endpoint_instance_create.o(.text._ux_host_stack_endpoint_instance_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = _ux_host_stack_endpoint_instance_create &rArr; _ux_utility_semaphore_create &rArr; _txe_semaphore_create &rArr; _tx_thread_system_preempt_check &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_bandwidth_claim
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_bandwidth_check
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_interface_instance_create
</UL>

<P><STRONG><a name="[2d3]"></a>_ux_host_stack_endpoint_instance_delete</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ux_host_stack_endpoint_instance_delete.o(.text._ux_host_stack_endpoint_instance_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _ux_host_stack_endpoint_instance_delete &rArr; _ux_utility_semaphore_delete &rArr; _txe_semaphore_delete &rArr; _tx_semaphore_delete &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_bandwidth_release
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_resources_free
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_interface_instance_delete
</UL>

<P><STRONG><a name="[289]"></a>_ux_host_stack_endpoint_transfer_abort</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ux_host_stack_endpoint_transfer_abort.o(.text._ux_host_stack_endpoint_transfer_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _ux_host_stack_endpoint_transfer_abort &rArr; _ux_host_stack_transfer_request_abort &rArr; _ux_utility_semaphore_put &rArr; _txe_semaphore_put &rArr; _tx_semaphore_put &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_resources_free
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_periodic_report_stop
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_deactivate
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_deactivate
</UL>

<P><STRONG><a name="[bd]"></a>_ux_host_stack_enum_thread_entry</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ux_host_stack_enum_thread_entry.o(.text._ux_host_stack_enum_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = _ux_host_stack_enum_thread_entry &rArr; _ux_host_stack_rh_change_process &rArr; _ux_host_stack_rh_device_insertion &rArr; _ux_host_stack_new_device_create &rArr; _ux_host_stack_configuration_enumerate &rArr; _ux_host_stack_configuration_descriptor_parse &rArr; _ux_host_stack_interfaces_scan &rArr; _ux_host_stack_new_interface_create &rArr; _ux_host_stack_new_endpoint_create &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_get
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_rh_change_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ux_host_stack_initialize.o(.text._ux_host_stack_initialize)
</UL>
<P><STRONG><a name="[22b]"></a>_ux_host_stack_hcd_register</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ux_host_stack_hcd_register.o(.text._ux_host_stack_hcd_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _ux_host_stack_hcd_register &rArr; _ux_utility_string_length_check &rArr; _ux_system_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_string_length_check
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBX_APP_Host_Init
</UL>

<P><STRONG><a name="[be]"></a>_ux_host_stack_hcd_thread_entry</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ux_host_stack_hcd_thread_entry.o(.text._ux_host_stack_hcd_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _ux_host_stack_hcd_thread_entry &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ux_host_stack_initialize.o(.text._ux_host_stack_initialize)
</UL>
<P><STRONG><a name="[1e5]"></a>_ux_host_stack_initialize</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, ux_host_stack_initialize.o(.text._ux_host_stack_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = _ux_host_stack_initialize &rArr; _ux_utility_thread_create &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_create
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_delete
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_delete
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_create
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USBX_Host_Init
</UL>

<P><STRONG><a name="[2b7]"></a>_ux_host_stack_interface_endpoint_get</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ux_host_stack_interface_endpoint_get.o(.text._ux_host_stack_interface_endpoint_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ux_host_stack_interface_endpoint_get &rArr; _ux_system_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_interrupt_endpoint_start
</UL>

<P><STRONG><a name="[2cd]"></a>_ux_host_stack_interface_instance_create</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ux_host_stack_interface_instance_create.o(.text._ux_host_stack_interface_instance_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = _ux_host_stack_interface_instance_create &rArr; _ux_host_stack_endpoint_instance_create &rArr; _ux_utility_semaphore_create &rArr; _txe_semaphore_create &rArr; _tx_thread_system_preempt_check &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_endpoint_instance_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_instance_create
</UL>

<P><STRONG><a name="[2ce]"></a>_ux_host_stack_interface_instance_delete</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ux_host_stack_interface_instance_delete.o(.text._ux_host_stack_interface_instance_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _ux_host_stack_interface_instance_delete &rArr; _ux_host_stack_endpoint_instance_delete &rArr; _ux_utility_semaphore_delete &rArr; _txe_semaphore_delete &rArr; _tx_semaphore_delete &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_endpoint_instance_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_instance_delete
</UL>

<P><STRONG><a name="[2c8]"></a>_ux_host_stack_interfaces_scan</STRONG> (Thumb, 180 bytes, Stack size 72 bytes, ux_host_stack_interfaces_scan.o(.text._ux_host_stack_interfaces_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _ux_host_stack_interfaces_scan &rArr; _ux_host_stack_new_interface_create &rArr; _ux_host_stack_new_endpoint_create &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_descriptor_parse
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_new_interface_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_descriptor_parse
</UL>

<P><STRONG><a name="[2ca]"></a>_ux_host_stack_new_configuration_create</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ux_host_stack_new_configuration_create.o(.text._ux_host_stack_new_configuration_create))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_enumerate
</UL>

<P><STRONG><a name="[2bb]"></a>_ux_host_stack_new_device_create</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, ux_host_stack_new_device_create.o(.text._ux_host_stack_new_device_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = _ux_host_stack_new_device_create &rArr; _ux_host_stack_configuration_enumerate &rArr; _ux_host_stack_configuration_descriptor_parse &rArr; _ux_host_stack_interfaces_scan &rArr; _ux_host_stack_new_interface_create &rArr; _ux_host_stack_new_endpoint_create &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_new_device_get
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_descriptor_read
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_address_set
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_enumerate
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_interface_scan
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_device_scan
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_rh_device_insertion
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_connection_process
</UL>

<P><STRONG><a name="[2d9]"></a>_ux_host_stack_new_device_get</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ux_host_stack_new_device_get.o(.text._ux_host_stack_new_device_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ux_host_stack_new_device_get
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_new_device_create
</UL>

<P><STRONG><a name="[2da]"></a>_ux_host_stack_new_endpoint_create</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, ux_host_stack_new_endpoint_create.o(.text._ux_host_stack_new_endpoint_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _ux_host_stack_new_endpoint_create &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_descriptor_parse
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_new_interface_create
</UL>

<P><STRONG><a name="[2d8]"></a>_ux_host_stack_new_interface_create</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, ux_host_stack_new_interface_create.o(.text._ux_host_stack_new_interface_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = _ux_host_stack_new_interface_create &rArr; _ux_host_stack_new_endpoint_create &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_descriptor_parse
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_new_endpoint_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_interfaces_scan
</UL>

<P><STRONG><a name="[2d7]"></a>_ux_host_stack_rh_change_process</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, ux_host_stack_rh_change_process.o(.text._ux_host_stack_rh_change_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = _ux_host_stack_rh_change_process &rArr; _ux_host_stack_rh_device_insertion &rArr; _ux_host_stack_new_device_create &rArr; _ux_host_stack_configuration_enumerate &rArr; _ux_host_stack_configuration_descriptor_parse &rArr; _ux_host_stack_interfaces_scan &rArr; _ux_host_stack_new_interface_create &rArr; _ux_host_stack_new_endpoint_create &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_rh_device_insertion
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_rh_device_extraction
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_enum_thread_entry
</UL>

<P><STRONG><a name="[2db]"></a>_ux_host_stack_rh_device_extraction</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ux_host_stack_rh_device_extraction.o(.text._ux_host_stack_rh_device_extraction))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _ux_host_stack_rh_device_extraction &rArr; _ux_host_stack_device_remove &rArr; _ux_host_stack_device_resources_free &rArr; _ux_utility_memory_free &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_rh_change_process
</UL>

<P><STRONG><a name="[2dc]"></a>_ux_host_stack_rh_device_insertion</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, ux_host_stack_rh_device_insertion.o(.text._ux_host_stack_rh_device_insertion))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = _ux_host_stack_rh_device_insertion &rArr; _ux_host_stack_new_device_create &rArr; _ux_host_stack_configuration_enumerate &rArr; _ux_host_stack_configuration_descriptor_parse &rArr; _ux_host_stack_interfaces_scan &rArr; _ux_host_stack_new_interface_create &rArr; _ux_host_stack_new_endpoint_create &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_new_device_create
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_remove
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_rh_change_process
</UL>

<P><STRONG><a name="[28c]"></a>_ux_host_stack_transfer_request</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ux_host_stack_transfer_request.o(.text._ux_host_stack_transfer_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = _ux_host_stack_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_get
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_put
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_identify
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_descriptor_read
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_address_set
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_set
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_enumerate
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_descriptor_parse
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_change_process
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_interrupt_endpoint_start
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_descriptor_get
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_configure
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_periodic_report_start
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_set
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_transfer_request_completed
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_idle_set
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_descriptor_get
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_descriptor_parse
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_status_get
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_transfer_request_completed
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_feature
</UL>

<P><STRONG><a name="[277]"></a>_ux_host_stack_transfer_request_abort</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ux_host_stack_transfer_request_abort.o(.text._ux_host_stack_transfer_request_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _ux_host_stack_transfer_request_abort &rArr; _ux_utility_semaphore_put &rArr; _txe_semaphore_put &rArr; _tx_semaphore_put &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_put
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_identify
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_endpoint_transfer_abort
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_control_transfer
</UL>

<P><STRONG><a name="[1f3]"></a>_ux_system_error_handler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ux_system_error_handler.o(.text._ux_system_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ux_system_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_entry
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_entry
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_client_register
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_register
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_string_length_check
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_mouse_wheel_get
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_mouse_buttons_get
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_mouse_position_get
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_rh_device_insertion
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_new_device_create
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_new_interface_create
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_create
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_endpoint_instance_create
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_remove
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_descriptor_read
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_enumerate
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_interfaces_scan
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_bandwidth_check
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_interface_endpoint_get
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_interface_get
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_configuration_select
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_configuration_get
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_instance_destroy
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_mutex_on
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_create
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_mutex_create
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_interrupt_endpoint_start
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_descriptor_get
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_configure
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_compress
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_add
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_main_item_parse
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_local_item_parse
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_periodic_report_stop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_callback
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_periodic_report_start
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_set
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_callback_register
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_id_get
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_transfer_request_completed
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_global_item_parse
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_descriptor_get
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_client_search
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_configure
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_over_current_process
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_reset
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_connection_process
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_port_reset
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_transfer_abort
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_port_status_get
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_power_on_port
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_entry
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_endpoint_destroy
</UL>

<P><STRONG><a name="[1e4]"></a>_ux_system_initialize</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, ux_system_initialize.o(.text._ux_system_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = _ux_system_initialize &rArr; _ux_utility_mutex_create &rArr; _txe_mutex_create &rArr; _tx_thread_system_preempt_check &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_set
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USBX_Host_Init
</UL>

<P><STRONG><a name="[265]"></a>_ux_utility_delay_ms</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ux_utility_delay_ms.o(.text._ux_utility_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _ux_utility_delay_ms &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_rh_device_insertion
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_address_set
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_ports_power
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_reset
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_connection_process
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_transfer_abort
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_endpoint_destroy
</UL>

<P><STRONG><a name="[1f1]"></a>_ux_utility_descriptor_parse</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ux_utility_descriptor_parse.o(.text._ux_utility_descriptor_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ux_utility_descriptor_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_short_get
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_long_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_new_endpoint_create
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_new_interface_create
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_enumerate
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_interfaces_scan
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_descriptor_get
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_descriptor_parse
</UL>

<P><STRONG><a name="[1e6]"></a>_ux_utility_error_callback_register</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ux_utility_error_callback_register.o(.text._ux_utility_error_callback_register))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USBX_Host_Init
</UL>

<P><STRONG><a name="[292]"></a>_ux_utility_long_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_utility_long_get.o(.text._ux_utility_long_get))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_descriptor_parse
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_item_data_get
</UL>

<P><STRONG><a name="[274]"></a>_ux_utility_memory_allocate</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, ux_utility_memory_allocate.o(.text._ux_utility_memory_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_set
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_mutex_off
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_mutex_on
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free_block_best_get
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_initialize
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_client_register
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_initialize
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_new_endpoint_create
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_new_interface_create
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_descriptor_read
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_enumerate
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_descriptor_parse
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate_mulc_safe
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate_add_safe
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_interrupt_endpoint_start
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_descriptor_get
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_configure
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_activate
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_mouse_activate
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_add
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_set
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_activate
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_transfer_request_completed
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_descriptor_get
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_interrupt_endpoint_search
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_descriptor_parse
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_activate
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_status_get
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_control_transfer
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_trans_prepare
</UL>

<P><STRONG><a name="[2ab]"></a>_ux_utility_memory_allocate_add_safe</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ux_utility_memory_allocate_add_safe.o(.text._ux_utility_memory_allocate_add_safe))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _ux_utility_memory_allocate_add_safe &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_set
</UL>

<P><STRONG><a name="[2a5]"></a>_ux_utility_memory_allocate_mulc_safe</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ux_utility_memory_allocate_mulc_safe.o(.text._ux_utility_memory_allocate_mulc_safe))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _ux_utility_memory_allocate_mulc_safe &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_add
</UL>

<P><STRONG><a name="[2c4]"></a>_ux_utility_memory_compare</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ux_utility_memory_compare.o(.text._ux_utility_memory_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ux_utility_memory_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_get
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_instance_verify
</UL>

<P><STRONG><a name="[278]"></a>_ux_utility_memory_copy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ux_utility_memory_copy.o(.text._ux_utility_memory_copy))
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_hcd_register
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_client_register
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_register
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_copy
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_mouse_activate
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_add
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_callback
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_set
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_activate
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_global_item_parse
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_trans_prepare
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_trans_finish
</UL>

<P><STRONG><a name="[b8]"></a>_ux_utility_memory_free</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ux_utility_memory_free.o(.text._ux_utility_memory_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _ux_utility_memory_free &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_mutex_off
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_mutex_on
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_initialize
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_entry
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_initialize
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_new_endpoint_create
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_new_device_create
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_resources_free
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_descriptor_read
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_enumerate
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_configuration_descriptor_parse
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_descriptor_get
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_configure
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_activate
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_mouse_deactivate
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_mouse_activate
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_add
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_set
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_activate
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_transfer_request_completed
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_descriptor_get
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_deactivate
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_instance_clean
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_descriptor_parse
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_activate
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_status_get
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_deactivate
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_control_transfer
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_entry
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_trans_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ux_host_class_hid_keyboard_deactivate.o(.text._ux_host_class_hid_keyboard_deactivate)
</UL>
<P><STRONG><a name="[2e0]"></a>_ux_utility_memory_free_block_best_get</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ux_utility_memory_free_block_best_get.o(.text._ux_utility_memory_free_block_best_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ux_utility_memory_free_block_best_get
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
</UL>

<P><STRONG><a name="[261]"></a>_ux_utility_memory_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ux_utility_memory_set.o(.text._ux_utility_memory_set))
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_initialize
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_set
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_new_device_get
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_resources_free
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_main_item_parse
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_callback
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_ed_obtain
</UL>

<P><STRONG><a name="[2de]"></a>_ux_utility_mutex_create</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ux_utility_mutex_create.o(.text._ux_utility_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = _ux_utility_mutex_create &rArr; _txe_mutex_create &rArr; _tx_thread_system_preempt_check &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_create
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_initialize
</UL>

<P><STRONG><a name="[2e1]"></a>_ux_utility_mutex_off</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_utility_mutex_off.o(.text._ux_utility_mutex_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _ux_utility_mutex_off &rArr; _txe_mutex_put &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_put
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
</UL>

<P><STRONG><a name="[2df]"></a>_ux_utility_mutex_on</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ux_utility_mutex_on.o(.text._ux_utility_mutex_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_get
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
</UL>

<P><STRONG><a name="[27f]"></a>_ux_utility_semaphore_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ux_utility_semaphore_create.o(.text._ux_utility_semaphore_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = _ux_utility_semaphore_create &rArr; _txe_semaphore_create &rArr; _tx_thread_system_preempt_check &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_initialize
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_new_device_create
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_endpoint_instance_create
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_activate
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_activate
</UL>

<P><STRONG><a name="[28b]"></a>_ux_utility_semaphore_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_utility_semaphore_delete.o(.text._ux_utility_semaphore_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _ux_utility_semaphore_delete &rArr; _txe_semaphore_delete &rArr; _tx_semaphore_delete &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_initialize
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_endpoint_instance_delete
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_resources_free
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_deactivate
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_activate
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_deactivate
</UL>

<P><STRONG><a name="[1f9]"></a>_ux_utility_semaphore_get</STRONG> (Thumb, 68 bytes, Stack size 72 bytes, ux_utility_semaphore_get.o(.text._ux_utility_semaphore_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_identify
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_info_get
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_get
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_hcd_thread_entry
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_enum_thread_entry
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_thread
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_periodic_report_start
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_set
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_callback_register
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_id_get
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_idle_set
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_deactivate
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_control_transfer
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[174]"></a>_ux_utility_semaphore_put</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_utility_semaphore_put.o(.text._ux_utility_semaphore_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _ux_utility_semaphore_put &rArr; _txe_semaphore_put &rArr; _tx_semaphore_put &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_put
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request_abort
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_callback
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_periodic_report_start
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_set
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_callback_register
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_report_id_get
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_idle_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_transfer_request_completed
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_SOF_Callback
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_NotifyURBChange_Callback
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Disconnect_Callback
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Connect_Callback
</UL>

<P><STRONG><a name="[291]"></a>_ux_utility_short_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_utility_short_get.o(.text._ux_utility_short_get))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_descriptor_parse
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_change_process
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_item_data_get
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_status_get
</UL>

<P><STRONG><a name="[b4]"></a>_ux_utility_short_put</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_utility_short_put.o(.text._ux_utility_short_put))
<BR>[Address Reference Count : 1]<UL><LI> ux_hcd_stm32_request_control_transfer.o(.text._ux_hcd_stm32_request_control_transfer)
</UL>
<P><STRONG><a name="[283]"></a>_ux_utility_string_length_check</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ux_utility_string_length_check.o(.text._ux_utility_string_length_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ux_utility_string_length_check &rArr; _ux_system_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_hcd_register
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_client_register
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_register
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_get
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_class_instance_verify
</UL>

<P><STRONG><a name="[296]"></a>_ux_utility_thread_create</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, ux_utility_thread_create.o(.text._ux_utility_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = _ux_utility_thread_create &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_initialize
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_activate
</UL>

<P><STRONG><a name="[299]"></a>_ux_utility_thread_delete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ux_utility_thread_delete.o(.text._ux_utility_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _ux_utility_thread_delete &rArr; _txe_thread_terminate &rArr; _tx_thread_terminate &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_terminate
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_initialize
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_deactivate
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_activate
</UL>

<P><STRONG><a name="[2dd]"></a>_ux_utility_thread_identify</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ux_utility_thread_identify.o(.text._ux_utility_thread_identify))
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_identify
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_transfer_request_abort
</UL>

<P><STRONG><a name="[2e3]"></a>_ux_utility_thread_relinquish</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_utility_thread_relinquish.o(.text._ux_utility_thread_relinquish))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _ux_utility_thread_relinquish &rArr; _txe_thread_relinquish &rArr; _tx_thread_relinquish &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_relinquish
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_schedule_other
</UL>

<P><STRONG><a name="[28a]"></a>_ux_utility_thread_schedule_other</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ux_utility_thread_schedule_other.o(.text._ux_utility_thread_schedule_other))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _ux_utility_thread_schedule_other &rArr; _txe_thread_priority_change &rArr; _tx_thread_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_identify
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_priority_change
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_relinquish
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_resources_free
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_deactivate
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_deactivate
</UL>

<P><STRONG><a name="[16e]"></a>bsp_DelayMS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_dwt.o(.text.bsp_DelayMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_DelayMS &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[2e4]"></a>bsp_DelayUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_dwt.o(.text.bsp_DelayUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>

<P><STRONG><a name="[15b]"></a>bsp_GetKey</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_key_1.o(.text.bsp_GetKey))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUserIF
</UL>

<P><STRONG><a name="[157]"></a>bsp_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp.o(.text.bsp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = bsp_Init &rArr; bsp_InitUart &rArr; bsp_SetUartParam &rArr; HAL_UART_Init &rArr; OUTLINED_FUNCTION_3 &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitKey
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitTimer
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitDWT
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[2e5]"></a>bsp_InitDWT</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp_dwt.o(.text.bsp_InitDWT))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[2e7]"></a>bsp_InitKey</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, bsp_key_1.o(.text.bsp_InitKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bsp_InitKey &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[2e9]"></a>bsp_InitLed</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, bsp_led.o(.text.bsp_InitLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsp_InitLed
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[2e6]"></a>bsp_InitTimer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_timer.o(.text.bsp_InitTimer))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[2e8]"></a>bsp_InitUart</STRONG> (Thumb, 388 bytes, Stack size 256 bytes, bsp_uart_fifo.o(.text.bsp_InitUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = bsp_InitUart &rArr; bsp_SetUartParam &rArr; HAL_UART_Init &rArr; OUTLINED_FUNCTION_3 &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_InitTXE
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetUartParam
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[2ed]"></a>bsp_KeyScan10ms</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, bsp_key_1.o(.text.bsp_KeyScan10ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsp_KeyScan10ms &rArr; IsKeyDownFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDownFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer10ms
</UL>

<P><STRONG><a name="[bf]"></a>bsp_LedOff</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bsp_led.o(.text.bsp_LedOff))
<BR><BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_led.o(.text.bsp_InitLed)
</UL>
<P><STRONG><a name="[154]"></a>bsp_LedToggle</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bsp_led.o(.text.bsp_LedToggle))
<BR><BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgPro
</UL>

<P><STRONG><a name="[1ed]"></a>bsp_PutKey</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_key_1.o(.text.bsp_PutKey))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[20e]"></a>bsp_RunPer10ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(.text.bsp_RunPer10ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsp_RunPer10ms &rArr; bsp_KeyScan10ms &rArr; IsKeyDownFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_KeyScan10ms
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>

<P><STRONG><a name="[20d]"></a>bsp_RunPer1ms</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp.o(.text.bsp_RunPer1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bsp_RunPer1ms &rArr; TOUCH_CapScan &rArr; GT911_Scan &rArr; TOUCH_PutKey &rArr; TOUCH_TransY &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_CapScan
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>

<P><STRONG><a name="[2eb]"></a>bsp_SetUartParam</STRONG> (Thumb, 72 bytes, Stack size 176 bytes, bsp_uart_fifo.o(.text.bsp_SetUartParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = bsp_SetUartParam &rArr; HAL_UART_Init &rArr; OUTLINED_FUNCTION_3 &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[2f0]"></a>comSendBuf</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, bsp_uart_fifo.o(.text.comSendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = comSendBuf &rArr; ComToUart
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComToUart
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comSendChar
</UL>

<P><STRONG><a name="[2f1]"></a>comSendChar</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bsp_uart_fifo.o(.text.comSendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = comSendChar &rArr; comSendBuf &rArr; ComToUart
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comSendBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[99]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_uart_fifo.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fputc &rArr; comSendChar &rArr; comSendBuf &rArr; ComToUart
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comSendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>hid_keyboard_thread_entry</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ux_host_keyboard.o(.text.hid_keyboard_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hid_keyboard_thread_entry &rArr; _ux_host_class_hid_keyboard_key_get &rArr; _ux_host_stack_class_instance_verify &rArr; _ux_utility_string_length_check &rArr; _ux_system_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_keyboard_key_get
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbx_host.o(.text.MX_USBX_Host_Init)
</UL>
<P><STRONG><a name="[a7]"></a>hid_mouse_thread_entry</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, ux_host_mouse.o(.text.hid_mouse_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = hid_mouse_thread_entry &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_mouse_wheel_get
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_mouse_buttons_get
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_mouse_position_get
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbx_host.o(.text.MX_USBX_Host_Init)
</UL>
<P><STRONG><a name="[163]"></a>i2c_Ack</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(.text.i2c_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadReg
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
</UL>

<P><STRONG><a name="[164]"></a>i2c_NAck</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(.text.i2c_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadReg
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
</UL>

<P><STRONG><a name="[162]"></a>i2c_ReadByte</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bsp_i2c_gpio.o(.text.i2c_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c_ReadByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadReg
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
</UL>

<P><STRONG><a name="[9e]"></a>i2c_SendByte</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bsp_i2c_gpio.o(.text.i2c_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_WriteBytes
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bsp_ts_gt911.o(.text.GT911_ReadReg)
<LI> bsp_ts_gt911.o(.text.GT911_Scan)
</UL>
<P><STRONG><a name="[161]"></a>i2c_Start</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(.text.i2c_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadReg
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan
</UL>

<P><STRONG><a name="[165]"></a>i2c_Stop</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(.text.i2c_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_WriteBytes
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadReg
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan
</UL>

<P><STRONG><a name="[9f]"></a>i2c_WaitAck</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(.text.i2c_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_WriteBytes
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bsp_ts_gt911.o(.text.GT911_ReadReg)
<LI> bsp_ts_gt911.o(.text.GT911_Scan)
</UL>
<P><STRONG><a name="[ff]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = main &rArr; System_init &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SuspendTick
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[23c]"></a>tx_application_define</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, main.o(.text.tx_application_define))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tx_application_define
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[126]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2f5]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[2f4]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[2f6]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[2f7]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[127]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[128]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2f8]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hardfaulthandler.o(OSKERNEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; HardFaultHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[12a]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[118]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[f7]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[9a]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[f0]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[33e]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[33f]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[d2]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[d6]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c5]"></a>AppTaskStart</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, main.o(.text.AppTaskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = AppTaskStart &rArr; bsp_Init &rArr; bsp_InitUart &rArr; bsp_SetUartParam &rArr; HAL_UART_Init &rArr; OUTLINED_FUNCTION_3 &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_create
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USBX_Host_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ResumeTick
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.tx_application_define)
</UL>
<P><STRONG><a name="[c7]"></a>AppTaskStat</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, main.o(.text.AppTaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AppTaskStat &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.tx_application_define)
</UL>
<P><STRONG><a name="[c8]"></a>AppTaskIDLE</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text.AppTaskIDLE))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.tx_application_define)
</UL>
<P><STRONG><a name="[9b]"></a>AppTaskMsgPro</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.AppTaskMsgPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + In Cycle
<LI>Call Chain = AppTaskMsgPro &rArr;  AppTaskMsgPro (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedToggle
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgPro
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgPro
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.AppTaskStart)
</UL>
<P><STRONG><a name="[9c]"></a>AppTaskUserIF</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, main.o(.text.AppTaskUserIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = AppTaskUserIF &rArr; App_Printf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetKey
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.AppTaskStart)
</UL>
<P><STRONG><a name="[9d]"></a>App_Printf</STRONG> (Thumb, 72 bytes, Stack size 240 bytes, main.o(.text.App_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = App_Printf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_put
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_get
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUserIF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.AppTaskUserIF)
</UL>
<P><STRONG><a name="[1e9]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_usbx_host.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; _txe_byte_allocate &rArr; _tx_byte_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USBX_Host_Init
</UL>

<P><STRONG><a name="[1ea]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_usbx_host.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USBX_Host_Init
</UL>

<P><STRONG><a name="[a0]"></a>ux_host_event_callback</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, app_usbx_host.o(.text.ux_host_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ux_host_event_callback &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbx_host.o(.text.MX_USBX_Host_Init)
</UL>
<P><STRONG><a name="[a1]"></a>ux_host_error_callback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_usbx_host.o(.text.ux_host_error_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ux_host_error_callback &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbx_host.o(.text.MX_USBX_Host_Init)
</UL>
<P><STRONG><a name="[a6]"></a>app_ux_host_thread_entry</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_usbx_host.o(.text.app_ux_host_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = app_ux_host_thread_entry &rArr; USBX_APP_Host_Init &rArr; MX_USB_OTG_HS_HCD_Init &rArr; HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; OUTLINED_FUNCTION_8 &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBX_APP_Host_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbx_host.o(.text.MX_USBX_Host_Init)
</UL>
<P><STRONG><a name="[1ff]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_usbx_host.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; putchar &rArr; fputc &rArr; comSendChar &rArr; comSendBuf &rArr; ComToUart
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux_host_event_callback
</UL>

<P><STRONG><a name="[211]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[213]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[214]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[215]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[1e0]"></a>IsKeyDownFunc</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bsp_key_1.o(.text.IsKeyDownFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDownFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPinActive
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_KeyScan10ms
</UL>

<P><STRONG><a name="[1ec]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_key_1.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_PutKey
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_KeyScan10ms
</UL>

<P><STRONG><a name="[1e1]"></a>KeyPinActive</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_key_1.o(.text.KeyPinActive))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDownFunc
</UL>

<P><STRONG><a name="[2ea]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_uart_fifo.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[2ec]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_uart_fifo.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[229]"></a>UartIRQ</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, bsp_uart_fifo.o(.text.UartIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UartIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[231]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_uart_fifo.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIRQ
</UL>

<P><STRONG><a name="[217]"></a>TOUCH_TransX</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, bsp_ts_touch.o(.text.TOUCH_TransX))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TOUCH_TransX &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTwoPoint
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
</UL>

<P><STRONG><a name="[218]"></a>TOUCH_TransY</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, bsp_ts_touch.o(.text.TOUCH_TransY))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TOUCH_TransY &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTwoPoint
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
</UL>

<P><STRONG><a name="[1fb]"></a>CalTwoPoint</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_ts_touch.o(.text.CalTwoPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalTwoPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_TransY
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_TransX
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[1fa]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_ts_touch.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTwoPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_TransY
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_TransX
</UL>

<P><STRONG><a name="[21e]"></a>TOUCH_PressValid</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bsp_ts_touch.o(.text.TOUCH_PressValid))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[21f]"></a>TOUCH_DataFilter</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bsp_ts_touch.o(.text.TOUCH_DataFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TOUCH_DataFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[160]"></a>FT5X06_ReadReg</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bsp_ts_ft5x06.o(.text.FT5X06_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FT5X06_ReadReg &rArr; i2c_ReadByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_Scan
</UL>

<P><STRONG><a name="[169]"></a>GT811_ReadReg</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, bsp_ts_gt811.o(.text.GT811_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GT811_ReadReg &rArr; i2c_ReadByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_Scan
</UL>

<P><STRONG><a name="[16b]"></a>GT911_ReadReg</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, bsp_ts_gt911.o(.text.GT911_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GT911_ReadReg &rArr; i2c_ReadByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan
</UL>

<P><STRONG><a name="[1ee]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_ts_stmpe811.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; i2c_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_WriteBytes
</UL>

<P><STRONG><a name="[2f2]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_i2c_gpio.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>

<P><STRONG><a name="[2f3]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_i2c_gpio.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>

<P><STRONG><a name="[c4]"></a>i2c_Delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_i2c_gpio.o(.text.i2c_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_i2c_gpio.o(.text.i2c_WaitAck)
</UL>
<P><STRONG><a name="[1d8]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SuspendTick
</UL>

<P><STRONG><a name="[1d6]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ResumeTick
</UL>

<P><STRONG><a name="[170]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnableCompensationCell
</UL>

<P><STRONG><a name="[17b]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_hcd.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Halt
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Init
</UL>

<P><STRONG><a name="[17d]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_hcd.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Halt
</UL>

<P><STRONG><a name="[192]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_hcd.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadChInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[193]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h7xx_hal_hcd.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[194]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_hcd.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[195]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_hcd.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[196]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_hcd.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[1ad]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[1b2]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
</UL>

<P><STRONG><a name="[1b3]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
</UL>

<P><STRONG><a name="[1d2]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1d3]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1d5]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1cd]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1cf]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[1be]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_11 &rArr; RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1bf]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1c0]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_10 &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1c1]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1c2]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1c3]"></a>OUTLINED_FUNCTION_20</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_20))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1c4]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1c5]"></a>OUTLINED_FUNCTION_18</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_18))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1c6]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1c7]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1c8]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1c9]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1ca]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1cb]"></a>OUTLINED_FUNCTION_19</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_19))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1fc]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
</UL>

<P><STRONG><a name="[200]"></a>OUTLINED_FUNCTION_21</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_21))
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>

<P><STRONG><a name="[205]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>

<P><STRONG><a name="[1fd]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[1b9]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[1ba]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[1bb]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[1bc]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[1b8]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[1b6]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
</UL>

<P><STRONG><a name="[1da]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1db]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1dc]"></a>OUTLINED_FUNCTION_45</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_45))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_45 &rArr; UART_AdvFeatureConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1dd]"></a>OUTLINED_FUNCTION_42</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_42))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1de]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[227]"></a>OUTLINED_FUNCTION_38</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_38))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[202]"></a>OUTLINED_FUNCTION_34</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_34))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_34 &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[221]"></a>OUTLINED_FUNCTION_41</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_41))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[222]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[223]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[224]"></a>UART_EndRxTransfer</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.UART_EndRxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[225]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>

<P><STRONG><a name="[226]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>

<P><STRONG><a name="[22c]"></a>USB_CoreReset</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, stm32h7xx_ll_usb.o(.text.USB_CoreReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[22d]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
</UL>

<P><STRONG><a name="[22e]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
</UL>

<P><STRONG><a name="[24e]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tx_thread_system_resume.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>

<P><STRONG><a name="[24f]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tx_thread_system_resume.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>

<P><STRONG><a name="[250]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tx_thread_system_resume.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>

<P><STRONG><a name="[251]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tx_thread_system_resume.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>

<P><STRONG><a name="[1ef]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ux_host_mouse.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; putchar &rArr; fputc &rArr; comSendChar &rArr; comSendBuf &rArr; ComToUart
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_mouse_thread_entry
</UL>

<P><STRONG><a name="[1f0]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ux_host_stack_device_descriptor_read.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _ux_utility_descriptor_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_descriptor_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_stack_device_descriptor_read
</UL>

<P><STRONG><a name="[1f2]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ux_host_class_hid_descriptor_parse.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _ux_system_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_descriptor_parse
</UL>

<P><STRONG><a name="[1f4]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ux_host_class_hid_global_item_parse.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_item_data_get
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_global_item_parse
</UL>

<P><STRONG><a name="[1f6]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ux_host_class_hid_local_item_parse.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_item_data_get
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hid_local_item_parse
</UL>

<P><STRONG><a name="[2be]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ux_host_class_hub_port_change_process.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_host_class_hub_port_change_process
</UL>

<P><STRONG><a name="[181]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ux_hcd_stm32_callback.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_GetXferCount
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_NotifyURBChange_Callback
</UL>

<P><STRONG><a name="[1f8]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ux_hcd_stm32_request_control_transfer.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_get
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_hcd_stm32_request_control_transfer
</UL>

<P><STRONG><a name="[98]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[124]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
